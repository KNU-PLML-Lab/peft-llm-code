{"predictions": ["bytes.fromhex('4a4b4c').decode('utf-8')", "binascii.unhexlify('4a4b4c')", "s = bytes.fromhex('4a4b4c')", "codecs.decode('4a4b4c', 'hex')", "bytes.fromhex('4a4b4c').decode('utf-8')", "binascii.unhexlify('4a4b4c')", "bytes.fromhex('4a4b4c').decode('UTF-8')", "s = bytes.fromhex('4a4b4c').decode('utf-8')", "codecs.decode('4a4b4c', 'hex')", "bytes.fromhex('4a4b4c').decode('utf-8')"], "references": "bytes.fromhex('4a4b4c').decode('utf-8')"}
{"predictions": ["d.encode('cp1251').decode('utf-8')", "d.decode('cp1251').encode('utf-8')", "d.encode('cp1251').decode('cp1251')", "d.encode('cp1251').decode('utf8')", "d.encode('cp1251').decode('utf-8')", "d = d.encode('cp1251').decode('utf-8')", "d.decode('cp1251').encode('utf8')", "d.decode('cp1251').encode('utf-8')", "d = d.decode('cp1251').encode('utf-8')", "d.encode('cp1251').decode('utf-8')"], "references": "d.decode('cp1251').encode('utf8')"}
{"predictions": ["subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.decode('utf-8", "subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8').strip()", "subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8').strip()", "subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8').strip()", "subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')", "subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')", "subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')", "subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8').rstrip()", "subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')", "subprocess.run(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8').strip()"], "references": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"}
{"predictions": ["s1.intersection(s2)", "s1.intersection(s2)", "s1.intersection(s2)", "s1.intersection(s2)", "s1.intersection(s2)", "s1[s1.isin(s2)]", "s1.intersection(s2)", "s1.intersection(s2)", "pd.Series.intersection(s1, s2)", "s1.intersection(s2)"], "references": "pd.Series(list(set(s1).intersection(set(s2))))"}
{"predictions": ["datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S')", "datetime.strptime(when, '%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strptime(when, '%Y-%m-%dT%H:%M:%S.%fZ')", "datetime.datetime.strptime(when, '%Y-%m-%dT%H:%M:%SZ')", "datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S.%f').date()", "datetime.datetime.strptime(when, '%Y-%m-%dT%H:%M:%S.%f')", "datetime.datetime.strptime(when, '%Y-%m-%dT%H:%M:%S.%f')", "datetime.datetime.strptime(when, \"%Y-%m-%d %H:%M:%S\")"], "references": "datetime.datetime.strptime(when, '%Y-%m-%d').date()"}
{"predictions": ["np.sum(a)", "np.sum(a)", "np.sum(a, axis=0)", "a.sum(axis=0)", "a.sum(axis=0)", "np.sum(a, axis=1)", "a.sum()", "a.sum(axis=1)", "a.sum()", "a.sum(axis=1)"], "references": "a.sum(axis=1)"}
{"predictions": ["import warnings", "pd.options.mode.chained_assignment = None", "pd.options.mode.chained_assignment = None", "pandas.options.mode.chained_assignment = None", "import warnings", "import warnings", "with warnings.catch_warnings():", "with warnings.catch_warnings():", "with warnings.catch_warnings():", "import warnings"], "references": "warnings.simplefilter('always')"}
{"predictions": ["datetime.datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "datetime.datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')"], "references": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')"}
{"predictions": ["sys.path.append('/path/to/whatever')", "import sys", "sys.path.insert(0, '/path/to/whatever')", "import sys", "sys.path.append('/path/to/whatever')", "sys.path.append(\"/path/to/whatever\")", "os.chdir('/path/to/whatever')", "sys.path.append('/path/to/whatever')", "import sys", "import os"], "references": "sys.path.append('/path/to/whatever')"}
{"predictions": ["urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3','mp3.mp3')", "import urllib.request", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3','mp3.mp3')", "urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", filename=\"mp3.mp3\")", "urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")"], "references": "urllib.request.urlretrieve('https://github.com/zorazrw/multilingual-conala/blob/master/dataset/test/es_test.json','mp3.mp3')"}
{"predictions": ["urllib.request.urlretrieve('http://www.example.com/')", "urllib.request.urlretrieve('http://www.example.com/', 'example.txt')", "urllib.request.urlretrieve('http://www.example.com/', 'example.com')", "urllib.request.urlretrieve('http://www.example.com/', 'example.html')", "urllib.request.urlopen('http://www.example.com/')", "urllib.request.urlopen('http://www.example.com/')", "urllib.request.urlopen('http://www.example.com/')", "urllib.request.urlopen('http://www.example.com/')", "urlretrieve('http://www.example.com/', 'example.txt')", "urllib.request.urlretrieve('http://www.example.com/')"], "references": "html = urllib.request.urlopen(url).read()"}
{"predictions": ["urllib.request.urlretrieve(url, filename)", "urllib.request.urlopen(url)", "urllib.request.urlretrieve(url)", "urllib.request.urlretrieve(url, filename)", "with urllib.request.urlopen(url) as response:", "urllib.request.urlopen(url).read()", "with urllib.request.urlopen(url) as f:", "urllib.request.urlretrieve(url, file_name)", "urllib.request.urlretrieve(url, 'filename')", "urllib.request.urlopen(url)"], "references": "requests.get(url)"}
{"predictions": ["urllib.request.urlretrieve(url, \"10MB\")", "urllib.request.urlretrieve(url, '10MB')", "urllib.request.urlretrieve(url, \"10MB\")", "urllib.request.urlretrieve(url, '10MB')", "urllib.request.urlretrieve(url, filename=\"10MB\")", "urllib.request.urlretrieve(url, filename='10MB')", "urllib.request.urlretrieve(url, \"10MB.txt\")", "with urllib.request.urlopen(url) as f:", "urllib.request.urlretrieve(url, '10MB.txt')", "urlretrieve(url, \"10MB\")"], "references": "\n\tresponse = requests.get(url, stream=True)\n\twith open('10MB', 'wb') as handle:\n\t\tfor data in response.iter_content():\n\t\t\thandle.write(data)\n\t"}
{"predictions": ["np.tensordot(P, T, axes=([1, 2], [1, 2]))", "np.tensordot(P, T, axes=([1, 2], [0, 1]))", "np.tensordot(P, T, axes=((1, 2), (0, 1)))", "np.tensordot(P, T, axes=([1, 2], [0, 2]))", "np.tensordot(P, T, axes=((1, 2), (1, 2)))", "np.tensordot(P, T, axes=((1, 2), (0, 2)))", "np.tensordot(P, T, axes=((1, 2), (0, 1)))", "np.tensordot(P, T, axes=((1, 2), (1, 2)))", "np.tensordot(P, T, axes=([1], [0]))", "np.tensordot(P, T, axes=((1, 2), (0, 2)))"], "references": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"}
{"predictions": ["float.fromhex('470FC614')", "float.fromhex('470FC614')", "int('470FC614', 16)", "int(0x470FC614, 16)", "float(0x470FC614)", "int('470FC614', 16)", "float(hex2float('470FC614'))", "float(0x470FC614)", "int(0x470FC614, 16)", "float.fromhex('470FC614')"], "references": "struct.unpack('!f', bytes.fromhex('470FC614'))[0]"}
{"predictions": ["list(reversed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "list(reversed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"], "references": "list(reversed(list(range(10))))"}
{"predictions": ["datetime.date.today() - datetime.timedelta(days=7)", "datetime.datetime.now() - datetime.timedelta(days=7)", "datetime.date.today() - datetime.timedelta(days=7)", "datetime.date.today() - datetime.timedelta(7)", "datetime.date.today() - datetime.timedelta(7)", "datetime.date.today() - timedelta(days=7)", "datetime.datetime.now() - datetime.timedelta(7)", "pd.Timestamp.today() - pd.Timedelta('7 days')", "pd.Timestamp.now() - pd.Timedelta('7 days')", "datetime.datetime.now() - datetime.timedelta(7)"], "references": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"}
{"predictions": ["base64.b64encode('your string'.encode('utf-8')).decode('utf-8')", "base64.b64encode('your string'.encode('utf-8'))", "base64.b64encode(your_string.encode('utf-8'))", "base64.b64encode(your string.encode('utf-8'))", "base64.b64encode('your string'.encode('utf-8'))", "base64.b64encode('your string'.encode('utf-8'))", "base64.b64encode('your string'.encode('utf-8'))", "base64.b64encode(your_string.encode('utf-8'))", "base64.b64encode(your_string.encode('utf-8'))", "base64.b64encode('your string'.encode('utf-8'))"], "references": "base64.b64encode(bytes('your string', 'utf-8'))"}
{"predictions": ["request.args.get('myParam')", "request.args.get('myParam')", "flask.request.args.get('myParam')", "url_param = request.args.get('myParam')", "flask.request.args['myParam']", "@app.route('/')", "@app.route('/', methods=['GET'])", "request.args['myParam']", "flask.request.args.get('myParam')", "request.args['myParam']"], "references": "request.args['myParam']"}
{"predictions": ["list(dict.fromkeys(mylist))", "mylist.count(mylist[0])", "mylist = list(set(mylist))", "mylist.count(mylist[0])", "set(mylist).difference(set(mylist))", "list(dict.fromkeys(mylist))", "list(set(mylist))", "list(set(mylist))", "mylist = list(set(mylist))", "list(set(mylist))"], "references": "[k for k, v in list(Counter(mylist).items()) if v > 1]"}
{"predictions": ["x.split('-')", "x.split('-')", "x.split('-')[-1]", "x.rsplit('-', 1)", "x.rsplit('-')", "x.split(\"-\")", "x.rsplit('-')", "x.rfind('-')", "x.rpartition('-')", "x.rsplit('-',1)"], "references": "x.rpartition('-')[0]"}
{"predictions": ["s[s.rfind('-'):]", "s.split('-')[-1]", "s[s.rfind('-')+1:]", "s[s.rfind('-') + 1:]", "text[text.rfind('-'):]", "text[text.rfind('-')+1:]", "s[s.rfind('-'):]", "text[text.rfind('-') + 1:]", "s.split('-')[-1]", "s[s.rfind('-') - 1]"], "references": "x.rsplit('-', 1)[0]"}
{"predictions": ["np.random.randint(low=0, high=100, size=10)", "list(np.random.randint(low=0, high=100, size=10))", "np.random.randint(low=0, high=10, size=10)", "np.random.randint(low=0, high=100, size=10)", "list(np.random.randint(low=0, high=10, size=10))", "np.random.randint(low=1, high=10, size=10)", "np.random.randint(low=0, high=10, size=10)", "list(np.random.randint(0, 100, 10))", "random.sample(range(100), 10)", "np.random.randint(0, 100, 10)"], "references": "[int(1000 * random.random()) for i in range(10000)]"}
{"predictions": ["datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]", "datetime.datetime.strftime(datetime.datetime.utcnow(), '%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strftime(datetime.datetime.utcnow(), '%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strftime(datetime.datetime.utcnow(), '%Y-%m-%dT%H:%M:%S.%fZ')", "datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%dT%H:%M:%S.%f')", "datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S.%f')"], "references": "datetime.datetime.now().strftime('%H:%M:%S.%f')"}
{"predictions": ["for i in range(len(tab)):", "for i in range(len(tab)):", "tab = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", "tab = [[1, 2, 3],", "tab = [[1, 2, 3],", "for i in range(len(tab)):", "tab = [[1, 2, 3],", "for i in range(len(tab)):", "for i in range(len(tab)):", "tab = [[1, 2, 3],"], "references": "'\\n'.join('\\t'.join(str(col) for col in row) for row in tab)"}
{"predictions": ["goals = '{:.2f}'.format(goals)", "f'{goals:.2f}'", "goals = f'{goals:.2f}'", "goals = f\"{goals:.2f}\"", "\"{:.2f}\".format(goals)", "goals = f\"{goals:.1f}\"", "f\"{goals:.2f} {penalties:.2f}\"", "goals = f'{goals:.1f}'", "pd.DataFrame({'goals': goals, 'penalties': penalties})", "pd.DataFrame({'goals': goals, 'penalties': penalties})"], "references": "\"\"\"({:d} goals, ${:d})\"\"\".format(goals, penalties)"}
{"predictions": ["df.apply(lambda x: sum(x!= 0), axis=0)", "df.apply(lambda x: np.count_nonzero(x.values))", "df.apply(lambda x: sum(x.values!= 0), axis=0)", "df.apply(lambda x: np.count_nonzero(x.values), axis=0)", "df.apply(lambda x: np.count_nonzero(x), axis=0)", "df.apply(lambda x: sum(x.values!= 0), axis=0)", "df.apply(lambda x: np.count_nonzero(x!= 0))", "df.apply(lambda x: np.count_nonzero(x.values))", "df.apply(lambda x: sum(x!= 0), axis=0)", "df.apply(lambda x: np.count_nonzero(x))"], "references": "df.astype(bool).sum(axis=1)"}
{"predictions": ["datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "pd.to_datetime(string_date, format='%Y-%m-%d %H:%M:%S.%f')", "datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "pd.to_datetime(string_date, format='%Y-%m-%d %H:%M:%S.%f')", "datetime.strptime(string_date, \"%Y-%m-%d %H:%M:%S.%f\")", "pd.to_datetime(string_date, format=\"%Y-%m-%d %H:%M:%S.%f\")", "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "dt.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')"], "references": "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')"}
{"predictions": ["re.sub('[^A-Za-z0-9 ]+', '', text)", "re.sub('[^a-zA-Z0-9 ]+', '', text)", "re.sub('[^a-zA-Z0-9 ]', '', text)", "re.sub('[^A-Za-z0-9 ]+', '', text.lower())", "re.sub('[^0-9a-zA-Z ]+', '', text)", "re.sub('[^a-zA-Z0-9 ]+', '', text.lower())", "re.sub('[^a-z0-9 ]+', '', text.lower())", "re.sub('[^A-Za-z0-9 ]', '', text)", "re.sub('[^a-zA-Z ]+', '', text)", "re.sub('[^A-Za-z0-9 ]+', '', text)"], "references": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"}
{"predictions": ["re.sub('[^a-zA-Z0-9 ]+', '', text)", "re.sub('[^A-Za-z0-9 ]+', '', text)", "re.sub('[^a-zA-Z0-9 ]', '', text)", "re.sub('[^a-z0-9 ]+', '', text)", "re.sub('[^0-9a-zA-Z ]+', '', text)", "text.translate(str.maketrans('', '', string.punctuation))", "re.sub('[^a-z0-9 ]+', '', text.lower())", "re.sub('[^a-zA-Z ]+', '', text)", "re.sub('[^a-zA-Z0-9 ]+', '', text).lower()", "re.sub('[^A-Za-z0-9 ]', '', text)"], "references": "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"}
{"predictions": ["'2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')", "s = '2.MATCHES $$TEXT$$ STRING'", "'2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')", "s = '2.MATCHES $$TEXT$$ STRING'", "text = '2.MATCHES $$TEXT$$ STRING'", "'2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')", "text = '2.MATCHES $$TEXT$$ STRING'", "s = '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')", "'2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')", "s = '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')"], "references": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]"}
{"predictions": ["soup.name", "soup.name", "soup.find('name')", "soup.find(\"name\")", "soup.find('name')", "print(soup.name)", "soup.name", "soup.name", "soup.name", "soup.find(name=\"name\")"], "references": "soup.find('name').string"}
{"predictions": ["with open(filepath, 'r') as f:", "len(open(filepath).read())", "len(open(filepath, 'r').read())", "len(open(filepath, 'rb').read())", "with open(filepath, 'rb') as f:", "with open(filepath, 'r') as file:", "len(open(filepath, 'r').read())", "with open(filepath) as f:", "with open(filepath, 'r') as f:", "with open(filepath) as f:"], "references": "os.stat(filepath).st_size"}
{"predictions": ["l.count('a')", "l.count('a')", "l.count(\"a\")", "l.count(\"a\")", "l.count(a)", "l.count(a)", "count(l, 'a')", "l.count('a')", "l.count('a')", "l.count(\"a\")"], "references": "l.count('a')"}
{"predictions": ["l.count(item)", "l.count(x)", "Counter(l)", "l.count(x)", "Counter(l)", "l.count(item)", "count(l)", "from collections import Counter", "l.count(l)", "l.count(value)"], "references": "Counter(l)"}
{"predictions": ["l.count(item)", "l.count(x)", "Counter(l)", "l.count(x)", "Counter(l)", "l.count(item)", "count(l)", "from collections import Counter", "l.count(l)", "l.count(value)"], "references": "[[x, l.count(x)] for x in set(l)]"}
{"predictions": ["l.count(item)", "l.count(x)", "Counter(l)", "l.count(x)", "Counter(l)", "l.count(item)", "count(l)", "from collections import Counter", "l.count(l)", "l.count(value)"], "references": "dict(((x, l.count(x)) for x in set(l)))"}
{"predictions": ["l.count('b')", "l.count('b')", "l.count(\"b\")", "l.count(b)", "l.count(\"b\")", "l.count(b)", "count(l, 'b')", "l.count('b')", "l.count('b')", "l.count(\"b\")"], "references": "l.count('b')"}
{"predictions": ["shutil.copyfile(srcfile, dstdir)", "shutil.copyfile('srcfile', 'dstdir')", "shutil.copy2(srcfile, dstdir)", "shutil.copyfile('srcfile', dstdir)", "shutil.copy('srcfile', 'dstdir')", "shutil.copyfile('srcfile', 'dstdir/srcfile')", "shutil.copy(srcfile, dstdir)", "shutil.copyfile(srcfile, dstdir)", "shutil.copy(srcfile, dstdir)", "shutil.copy(srcfile, dstdir)"], "references": "shutil.copy(srcfile, dstdir)"}
{"predictions": ["df['c'] = df.apply(lambda row: row['b'] + row['a'], axis=1)", "df['c'] = df.apply(lambda x: x['b'] + x['a'], axis=1)", "df['c'] = df.apply(lambda row: row['b'] + row['a'], axis=1)", "df['c'] = df.apply(lambda x: x['b'] + x['a'], axis=1)", "pd.concat([df['a'], df['b']], axis=1, keys=['b', 'a'])", "pd.concat([df['a'], df['b']], axis=1, keys=['a', 'b'])", "pd.concat([df['a'], df['b']], axis=1, keys=['c'])", "df['c'] = df.apply(lambda row: row['b'] + row['a'], axis=1)", "df['c'] = df.apply(lambda x: x['b'] + x['a'], axis=1)", "df['c'] = df['a'].combine_first(df['b'])"], "references": "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"}
{"predictions": ["list(t)", "list(t)", "t = list(t)", "tuple(list(t))", "list(t)", "t = list(t)", "tuple(t)", "tuple(t)", "list(t)", "tuple(list(t))"], "references": "list(t)"}
{"predictions": ["tuple(t)", "tuple(t)", "t = tuple(t)", "t = tuple(t)", "tuple(t)", "list(tuple(t))", "tuple(t)", "t = list(t)", "tuple(t)", "tuple(t)"], "references": "tuple(t)"}
{"predictions": ["list(level1)", "list(level1)", "level1 = list(level1)", "list(level1)", "list(level1)", "level1 = list(level1)", "list(level1)", "list(level1)", "tuple(level1)", "tuple(level1)"], "references": "level1 = map(list, level1)"}
{"predictions": ["dataobject.pprint(file=open(logFile, 'w'))", "with open(logFile, 'w') as f:", "with open(logFile, 'w') as f:", "with open('logFile', 'w') as f:", "with open('logFile', 'w') as f:", "dataobject.to_csv(logFile, sep='\\t', index=False)", "pprint.pprint(dataobject, logFile)", "dataobject.pprint(file=open(logFile, 'w'))", "pprint.pprint(dataobject, logFile)", "dataobject.pprint(file=open(logFile, 'w'))"], "references": "pprint.pprint(dataobject, logFile)"}
{"predictions": ["df['BoolCol'].index", "df['BoolCol'].index", "df.index[df['BoolCol'] == True]", "df.loc[df['BoolCol'] == True]", "df.loc[df['BoolCol']].index", "df.loc[df['BoolCol']].index", "df.index[df['BoolCol']]", "df.loc[df['BoolCol'], :]", "df.index[df['BoolCol']]", "df1[df1['BoolCol']].index"], "references": "df.loc[df['BoolCol']]"}
{"predictions": ["df['BoolCol'].values[df['BoolCol'].values == True]", "df.loc[df['BoolCol'] == True].index", "df.loc[df['BoolCol'] == True].index", "df[df['BoolCol'] == True].index.tolist()", "df[df['BoolCol'] == True].index.tolist()", "df.loc[df.BoolCol == True].index", "df.loc[df['BoolCol'] == True].index.tolist()", "df.loc[df['BoolCol'] == True].index.tolist()", "df[df['BoolCol'] == True].index", "df[df.BoolCol == True].index"], "references": "df.iloc[np.flatnonzero(df['BoolCol'])]"}
{"predictions": ["df['BoolCol'].index[df['BoolCol'] == True]", "df[df['BoolCol'] == True].index.tolist()", "df['BoolCol'].index[df['BoolCol'] == True]", "df['BoolCol'].index[df['BoolCol'] == True].tolist()", "df.loc[df['BoolCol'] == True].index", "df[df.BoolCol == True].index.tolist()", "df[df['BoolCol'] == True].index.tolist()", "df[df.BoolCol == True].index.tolist()", "df[df['BoolCol'] == True].index.tolist()", "df[df['BoolCol'] == True].index.tolist()"], "references": "df[df['BoolCol'] == True].index.tolist()"}
{"predictions": ["df.loc[df['BoolCol'] == True]", "df[df.BoolCol == True].index", "df[df['BoolCol'] == True].index", "df[df.BoolCol == True].index", "df[df['BoolCol'] == True].index", "df.loc[df['BoolCol'] == True]", "df.loc[df['BoolCol'] == True].index", "df.index[df['BoolCol'] == True]", "df.loc[df.BoolCol == True]", "df.index[df['BoolCol'] == True]"], "references": "df[df['BoolCol']].index.tolist()"}
{"predictions": ["os.chdir(owd)", "os.chdir(owd)", "os.chdir(os.path.dirname(os.path.realpath(__file__)))", "os.chdir(os.path.dirname(os.path.realpath(__file__)))", "os.chdir(os.path.dirname(os.path.abspath(__file__)))", "os.chdir(owd)", "os.chdir(os.path.dirname(os.path.abspath(__file__)))", "os.chdir(owd)", "os.chdir(os.path.dirname(os.path.realpath(__file__)))", "os.chdir(os.path.dirname(os.path.abspath(__file__)))"], "references": "os.chdir(owd)"}
{"predictions": ["soup.find('div', {'id':'main-content'}).div.decompose()", "from bs4 import BeautifulSoup", "soup.find_all('div', {'id':'main-content'})[0].decompose()", "soup.find('div', {'id':'main-content'}).div.decompose()", "from bs4 import BeautifulSoup", "soup.find('div', {'id':'main-content'}).decompose()", "soup.find_all('div', {'id':'main-content'})[0].div.decompose()", "soup.find('div', {'id':'main-content'}).decompose()", "from bs4 import BeautifulSoup", "from bs4 import BeautifulSoup"], "references": "soup.find('div', id='main-content').decompose()"}
{"predictions": ["df[df['ids'].str.contains('ball')]", "df.loc[df['ids'].str.contains('ball')]", "df.loc[df['ids'].str.contains('ball')]", "df[df['ids'].str.contains('ball', na=False)]", "df[df[\"ids\"].str.contains(\"ball\")]", "df.loc[df['ids'].str.contains('ball', na=False)]", "df[df['ids'].str.contains('ball', na=False)]", "df.loc[df.ids.str.contains('ball')]", "df[df['ids'].str.contains('ball')]", "df[df.ids.str.contains('ball')]"], "references": "df[df['ids'].str.contains('ball')]"}
{"predictions": ["df.set_index('id', inplace=True)", "df.set_index(df.columns, inplace=True)", "df.reset_index(inplace=True, drop=True)", "df.reset_index(level=0, inplace=True)", "df.set_index(df.columns.values, inplace=True)", "df.set_index(df.index, inplace=True)", "df.reset_index(level=0, inplace=True)", "df.set_index(df.columns, inplace=True)", "df.reset_index(inplace=True)", "df.reset_index(inplace=True)"], "references": "df.reset_index(level=['tick', 'obs'])"}
{"predictions": ["list(zip(a, b))", "list(zip(a,b))", "a.join(b)", "pd.merge(a, b, on=0)", "a.join(b)", "a.join(b)", "a.join(b)", "list(zip(a, b))", "a.join(b)", "a.join(b)"], "references": "np.array([zip(x, y) for x, y in zip(a, b)])"}
{"predictions": ["zip(a, b)", "zip(a, b)", "list(zip(a, b))", "list(zip(a, b))", "zip(a,b)", "list(zip(a,b))", "zip(a,b)", "np.vstack((a, b))", "list(zip(a,b))", "np.vstack((a,b))"], "references": "np.array(list(zip(a.ravel(),b.ravel())), dtype=('i4,i4')).reshape(a.shape)"}
{"predictions": ["\"abcd}def\".rfind(\"}\")", "\"abcd}def}\".rfind(\"}\")", "\"abcd}def}\".rfind(\"}\")", "\"abcd}def}\".rfind('}')", "\"abcd}def\".rfind(\"}\")", "\"abcd}def\".rfind(\"}\")", "\"abcd}def}\".rfind(\"}\")", "re.search(r'\\}', 'abcd}def')", "str.rfind('}')", "\"abcd}def}\".rfind(\"}\")"], "references": "'abcd}def}'.rfind('}')"}
{"predictions": ["mystring.replace(' ', '_')", "re.sub(' ', '_', mystring)", "mystring.replace(' ','_')", "mystring.replace(\" \", \"_\")", "mystring = mystring.replace(' ', '_')", "mystring.replace(' ', '_')", "mystring = mystring.replace(\" \", \"_\")", "mystring.replace(' ', '_')", "re.sub(' +', '_', mystring)", "re.sub('\\s', '_', mystring)"], "references": "mystring.replace(' ', '_')"}
{"predictions": ["np.random.shuffle(r)", "np.random.shuffle(r)", "numpy.random.shuffle(r)", "np.random.shuffle(r.T)", "np.random.shuffle(r)", "import numpy as np", "np.random.shuffle(r)", "np.random.shuffle(r, axis=1)", "r = np.random.permutation(r)", "np.random.shuffle(r.T)"], "references": "np.random.shuffle(np.transpose(r))"}
{"predictions": ["len(os.listdir())", "len(os.listdir('.'))", "os.listdir('.')", "len(os.listdir('C:\\\\'))", "import os", "len(os.listdir('.'))", "len(os.listdir('/'))", "os.listdir('C:\\\\')", "len(os.listdir('/'))", "import os"], "references": "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}
{"predictions": ["cursor.fetchone()", "result = cursor.fetchone()", "result = cursor.fetchone()", "cursor.fetchone()", "cursor.fetchall()", "result = cursor.fetchall()", "cursor.fetchone()", "cursor.fetchone()", "result = cursor.fetchall()[0][0]", "cursor.fetchall()[0][0]"], "references": "cursor.fetchone()[0]"}
{"predictions": ["list.sort(key=lambda x: x[0])", "sorted(list, key=lambda x: (x[0], x[-1]))", "list.sort(key=lambda x: x[0], reverse=True)", "list.sort(key=lambda x: (x[0], -x[1]))", "list.sort(key=lambda x: x[0], reverse=True)", "list.sort(key=lambda x: (x[0], x[-1]))", "list.sort(key=lambda x: x[0])", "list.sort(list, key=lambda x: x[0], reverse=True)", "list.sort(list, key=lambda x: x[0], reverse=True)", "list.sort(key=lambda x: x[0])"], "references": "sorted(list, key=lambda x: (x[0], -x[1]))"}
{"predictions": ["df.sort_values(by=['System_num', 'Dis'], inplace=True)", "df.sort_values(by=['System_num', 'Dis'], inplace=True)", "df.sort_values(['System_num', 'Dis'], inplace=True)", "df = df.sort_values(by=['System_num', 'Dis'])", "df.sort_values(by=['System_num', 'Dis'], ascending=False)", "df.sort_values(by=['System_num', 'Dis'])", "df.sort_values(['System_num', 'Dis'], inplace=True)", "df.sort_values(by=['System_num', 'Dis'], ascending=[True, False])", "df.sort_values(by=['System_num','Dis'], inplace=True)", "df.sort_values(by=['System_num', 'Dis'])"], "references": "df.sort_values(['System_num', 'Dis'])"}
{"predictions": ["with open('infile', 'r') as infile, open('outfile', 'w') as outfile:", "with open('infile') as infile, open('outfile', 'w') as outfile:", "with open('infile', 'r') as fin, open('outfile', 'w') as fout:", "with open('infile') as fin, open('outfile', 'w') as fout:", "with open(infile, 'r') as infile, open(outfile, 'w') as outfile:", "with open('infile', 'r') as infile:", "with open('infile') as infile, open('outfile','w') as outfile:", "with open('infile') as f:", "with open('infile', 'r') as f:", "with open('infile') as infile, open('outfile', 'w') as outfile:"], "references": "open(outfile, 'w').write('#test firstline\\n' + open(infile).read())"}
{"predictions": ["re.search('ba[rzd]', foobarrrr)", "re.search(r'ba[rzd]', foobarrrr)", "re.search('ba[rzd]', foobarrrr)", "re.search(r'ba[rzd]', foobarrrr)", "re.search(\"ba[rzd]\", foobarrrr)", "re.search('ba[rzd]', 'foobarrrr')", "re.match('ba[rzd]', foobarrrr)", "re.search(r'ba[rzd]', 'foobarrrr')", "re.search('ba[rzd]', 'foobarrrr')", "foobarrrr.findall('ba[rzd]')"], "references": "bool(re.search('ba[rzd]', 'foobarrrr'))"}
{"predictions": ["t = list(dict.fromkeys(t))", "t = list(dict.fromkeys(t))", "[x for x in t if x not in t[1:]]", "t = list(set(t))", "t = list(set(t))", "list(dict.fromkeys(t))", "list(dict.fromkeys(t))", "list(dict.fromkeys(t))", "list(dict.fromkeys(t))", "list(dict.fromkeys(t))"], "references": "list(set(t))"}
{"predictions": ["[x for x in source_list if x not in source_list[:source_list.index(x)]]", "[x for x in source_list if x not in source_list[:source_list.index(x) + 1]]", "[x for x in source_list if x not in source_list[:source_list.index(x)]]", "source_list = list(dict.fromkeys(source_list))", "[x for x in source_list if source_list.count(x) == 1]", "[x for x in source_list if source_list.count(x) == 1]", "[x for x in source_list if source_list.count(x) == 1]", "[x for x in source_list if source_list.count(x) == 1]", "[x for x in source_list if x not in source_list[:source_list.index(x) + 1]]", "[x for x in source_list if source_list.count(x) == 1]"], "references": "list(set(source_list))"}
{"predictions": ["abracadabra = list(dict.fromkeys(abracadabra))", "[x for x in abracadabra if abracadabra.count(x) == 1]", "[i for i in abracadabra if abracadabra.count(i) == 1]", "[x for x in abracadabra if abracadabra.count(x) ", "[i for i in abracadabra if abracadabra.count(i) ", "[x for x in abracadabra if abracadabra.count(x) == 1]", "abracadabra = list(dict.fromkeys(abracadabra))", "[i for i in abracadabra if abracadabra.count(i) == 1]", "[x for x in abracadabra if abracadabra.count(x) ", "[x for x in abracadabra if abracadabra.count(x) == 1 ]"], "references": "list(OrderedDict.fromkeys('abracadabra'))"}
{"predictions": ["list(a)", "a = np.array(a)", "a = np.array(a)", "a = np.array([1, 2, 3])", "a = np.array([1, 2, 3])", "a.tolist()", "a = np.array([1,2,3])", "a = np.array([1,2,3])", "a = np.array([1, 2, 3, 4])", "a = np.array([1,2,3,4])"], "references": "numpy.array(a).reshape(-1).tolist()"}
{"predictions": ["a[0].tolist()", "a[0].tolist()", "list(a[0])", "a[0] = list(a[0])", "a.tolist()[0]", "a.tolist()", "a[0, :].tolist()", "a[0,:].tolist()", "a.tolist()[0]", "a[0,:].tolist()"], "references": "numpy.array(a)[0].tolist()"}
{"predictions": ["soup.find('td', text='Address:').find_next_sibling('td').get_text()", "soup.find('td', text='Address:').find_next_sibling().get_text()", "soup.find_all('td', text='Address:')[0].find_next_sibling('td').text", "soup.find('td', text='Address:').find_next_sibling('td').text", "soup.td.next_sibling.get_text()", "soup.find_all('td', text='Address:')[0].find_next_sibling().get_text()", "soup.find('td', text='Address:').find_next_sibling('td').text", "soup.find('td', text='Address:').find_next_sibling('td').text", "soup.find('td', text='Address:').find_next_sibling('td').text", "soup.find('td', text='Address:').find_next_sibling('td').text"], "references": "soup.find(text='Address:').findNext('td').contents[0]"}
{"predictions": ["sorted(d.items(), key=lambda x: x[0])", "sorted(d.items(), key=lambda kv: kv[0])", "sorted(d.items(), key=lambda x: x[0])", "sorted(d.items(), key=lambda item: item[0])", "dict(sorted(d.items(), key=lambda x: x[0]))", "sorted(d.items(), key=lambda kv: kv[0])", "sorted(d.items(), key=lambda item: item[0])", "sorted(d.items(), key=lambda x: x[0])", "sorted(d.items(), key=lambda x:x[0])", "sorted(d, key=lambda x: x.keys())"], "references": "sorted(d.items())"}
{"predictions": ["base64.b64encode(data.encode('utf-8'))", "base64.b64encode(data.encode())", "data.apply(lambda x: x.encode('utf-8'))", "base64.b64encode(data)", "data.encode('utf-8')", "data.encode('utf-8')", "base64.b64encode(data.encode('utf-8'))", "data.encode('utf-8')", "data.encode('utf-8')", "base64.b64encode(data)"], "references": "base64.b64encode(b'data to be encoded')"}
{"predictions": ["data.encode('ascii')", "s.encode('ascii')", "data.encode('ascii', 'ignore')", "data.encode(\"ascii\")", "data.encode('utf-8')", "data.encode('ascii')", "data.encode('ascii')", "data.encode('ascii','strict')", "data.encode(encoding='ascii')", "data.encode('ascii')"], "references": "'data to be encoded'.encode('ascii')"}
{"predictions": ["my_object.my_str", "getattr(my_object,'my_str')", "my_object.my_str", "getattr(my_object, my_str)", "my_object.my_attr", "print(my_object.my_str)", "my_object.my_str", "my_object.my_str", "my_object['my_str']", "getattr(my_object, my_str)"], "references": "getattr(my_object, my_str)"}
{"predictions": ["sum(x[0] for x in list_of_pairs)", "[x[0] for x in list_of_pairs]", "sum([x[0] for x in list_of_pairs])", "sum(t[0] for t in list_of_pairs)", "sum(map(lambda x: x[0], list_of_pairs))", "list(map(lambda x: x[0], list_of_pairs))", "[x[0] for x in list_of_pairs]", "reduce(lambda x, y: x + y, list_of_pairs)", "sum(x[0] for x in list_of_pairs)", "sum([x[0] for x in list_of_pairs])"], "references": "sum([pair[0] for pair in list_of_pairs])"}
{"predictions": ["A[np.in1d(A, [1, 3, 4], invert=True)] = 0", "A[np.in1d(A, np.array([1, 3, 4]))] = 0", "A[~np.isin(A, [1, 3, 4])] = 0", "A[np.in1d(A, [1, 3, 4])] = 0", "np.where(np.isin(A, [1, 3, 4]), 0, A)", "np.where(np.isin(A, [1, 3, 4]), A, 0)", "np.where(np.in1d(A, [1, 3, 4]))", "A[np.isin(A, np.array([1, 3, 4]))] = 0", "np.where(np.in1d(A, [1, 3, 4]), A, 0)", "np.where(np.in1d(A, [1, 3, 4]), A, 0)"], "references": "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"}
{"predictions": ["np.mean(a, axis=1)", "np.mean(a, axis=0)", "a.mean(axis=0)", "a.mean(axis=0)", "a.mean(axis=1)", "a.mean(axis=1)", "np.mean(a)", "np.mean(a, axis=2)", "a.mean(1)", "np.mean(a, axis=1)"], "references": "np.mean(a, axis=1)"}
{"predictions": ["a[np.logical_and(a[:, 0] == 0, a[:, 1] == 1)]", "a[(a[:, 0] == 0) & (a[:, 1] == 1)]", "a[np.logical_and(a[:,0]==0, a[:,1]==1)]", "a[np.logical_and(a[:,0] == 0, a[:,1] == 1)]", "a[(a[:,0]==0) & (a[:,1]==1)]", "a[(a[:,0] == 0) & (a[:,1] == 1)]", "a[(a[:, 0] == 0) & (a[:, 1] == 1)]", "a[np.logical_and(a[:,0]==0,a[:,1]==1)]", "np.where(a[:, 0] == 0, a[:, 1], a[:, 0])", "a[(a[:,0]==0) & (a[:,1]==1)]"], "references": "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"}
{"predictions": ["df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()", "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()", "df.groupby(['col1', 'col2'])['col3'].nunique()", "df.groupby(['col1', 'col2'])['col3'].nunique()", "df.groupby(['col1', 'col2'])['col3'].nunique()", "df.groupby(['col1', 'col2'])['col3'].nunique()", "df.groupby(['col1', 'col2'])['col3'].nunique()", "df.groupby(['col1', 'col2'])['col3'].nunique()", "df.groupby(['col1', 'col2'])['col3'].nunique()", "df.groupby(['col1', 'col2'])['col3'].nunique()"], "references": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}
{"predictions": ["df = pd.DataFrame({'email': sf['email'], 'list': sf['list']})", "df = pd.DataFrame({'email': sf.index, 'list': sf.values})", "df = pd.DataFrame({'email': sf.email, 'list': sf.list})", "pd.DataFrame({'email': sf.email, 'list': sf.list})", "pd.DataFrame({'email': sf.index, 'list': sf.values})", "df = pd.DataFrame({'email': sf.index, 'list': sf.values})", "df = pd.DataFrame()", "df = pd.DataFrame({'email': sf.email, 'list': sf.list})", "df = pd.DataFrame({'email': sf.index, 'list': sf})", "df = pd.DataFrame({'email': sf['email'], 'list': sf['list']})"], "references": "df = pd.DataFrame({'email': sf.index, 'list': sf.values})"}
{"predictions": ["''.join(list)", "'\\t'.join(list)", "\"\\t\".join(list)", "'\\t'.join(list)", "''.join(list)", "print('\\t'.join(list))", "\"\\t\".join(list)", "list('\\t'.join(list))", "''.join(list)", "'\\t'.join(list)"], "references": "'\\t'.join(map(str, list))"}
{"predictions": ["l1.sort(reverse=True)[:10]", "l1.sort(reverse=True)[:10]", "l1.sort(reverse=True)[:10]", "l1.sort(reverse=True)[:10]", "l1.sort(reverse=True)[-10:]", "[l1[i] - l2[i] for i in range(len(l1))]", "l1.sort(reverse=True)", "l1.sort(reverse=True)", "l1.sort(reverse=True)[:10]", "l1.sort(reverse=True)"], "references": "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"}
{"predictions": ["soup.find_all('span', class_='starGryB sp')", "soup.find_all('span', {'class':'starGryB sp'})", "soup.find_all('span', class_=\"starGryB sp\")", "soup.find_all('span', attrs={'class':'starGryB sp'})", "soup.findAll('span', {'class':'starGryB sp'})", "soup.find_all('span', {'class':'starGryB sp'})", "soup.find_all('span', {'class':'starGryB sp'})", "soup.find_all('span', {'class':'starGryB sp'})", "soup.find_all('span', class_='starGryB sp')", "soup.find_all('span', class_='starGryB sp')"], "references": "soup.find_all('span', {'class':'starGryB sp'})"}
{"predictions": ["df.to_sql('test', con=engine, schema='a_schema', if_exists='append', index=False)", "df.to_sql('test', con=engine, schema='a_schema', if_exists='append')", "df.to_sql('test', con=engine, schema='a_schema', if_exists='replace')", "df.to_sql('test', con=engine, schema='a_schema', if_exists='replace', index=False)", "df.to_sql('test', con=engine, schema='a_schema', index=False, if_exists='replace')", "df.to_sql('test', con=engine, schema='a_schema', index=False, if_exists='append')", "df.to_sql('test', con=engine, schema='a_schema', if_exists='append')", "df.to_sql('test', con=engine, if_exists='append', schema='a_schema', index=False)", "df.to_sql(name='test', con=engine, schema='a_schema', if_exists='append')", "df.to_sql('test', con=engine, schema='a_schema', if_exists='append', index=False)"], "references": "df.to_sql('test', engine)"}
{"predictions": ["list5.sort(key=lambda x: x['degrees'])", "list5.sort(key=lambda x: x[1])", "list5.sort(key=lambda x: x.degrees)", "sorted(list5, key=lambda x: x[1])", "sorted(list5, key=lambda x: x['degrees'])", "list5.sort(key=lambda x: x.degree)", "list5.sort(key=lambda x: x[2])", "list5.sort(key=lambda x: x['degree'])", "list5.sort(key=lambda x: x['degrees'])", "sorted(list5, key=lambda x: x[2])"], "references": "sorted(list5, key = lambda x: (degrees(x), x))"}
{"predictions": ["(x for x in l)", "list(l)", "list(l)", "l = list(l)", "(x for x in l)", "(i for i in l)", "generator(l)", "l = list(l)", "(i for i in l)", "iter(l)"], "references": "(n for n in l)"}
{"predictions": ["obj.attr", "getattr(obj, attr)", "getattr(obj, 'attr')", "obj.attr", "obj['attr']", "obj.attr", "obj['attr']", "obj.attr", "print(obj.attr)", "attr = obj.attr"], "references": "getattr(obj, attr)"}
{"predictions": ["df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('a', 'b'))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('.', ''))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('a', 'A'))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace(' ', ''))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace(',', ''))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('a', '@'))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('.', ''))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace(',', ''))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('.', ','))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('.', ','))"], "references": "df['range'].replace(',', '-', inplace=True)"}
{"predictions": ["json.dumps(Decimal('3.9'), use_decimal=True)", "json.dumps(Decimal('3.9'))", "json.dumps(Decimal('3.9'))", "json.dumps(Decimal('3.9'))", "json.dumps(Decimal('3.9'))", "json.dumps(Decimal('3.9'))", "json.dumps(Decimal('3.9'))", "json.dumps(Decimal('3.9'))", "json.dumps(Decimal('3.9'))", "json.dumps(Decimal('3.9'))"], "references": "json.dumps('3.9')"}
{"predictions": ["re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)", "re.findall('\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)", "re.findall(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", s)", "re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)", "re.findall('\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)", "re.findall(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", s)", "re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)[0]", "re.findall('\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)[0]", "re.findall('\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)[0]", "re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)"], "references": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}
{"predictions": ["df[df['A'].value_counts() ", "df[df.A.duplicated(keep=False)]", "df[df['A'].value_counts() ", "df[df.duplicated(subset=['A'], keep=False)]", "df.drop_duplicates(subset=['A'])", "df[df.duplicated(subset=['A'])]", "df.drop_duplicates(subset=['A'], keep='first')", "df.drop_duplicates(subset='A', keep='first')", "df[df.duplicated(subset=['A'])]", "df.drop_duplicates(subset='A', keep='first')"], "references": "df.groupby('A').filter(lambda x: len(x) > 1)"}
{"predictions": ["fig, ax = plt.subplots()", "fig, ax = plt.subplots()", "plt.colorbar(mappable=mappable)", "fig, ax = plt.subplots()", "plt.colorbar(mappable)", "plt.colorbar(mappable=mappable)", "fig, ax = plt.subplots(figsize=(10, 5))", "fig, ax = plt.subplots(figsize=(10, 10))", "plt.colorbar(mappable)", "fig, ax = plt.subplots()"], "references": "plt.colorbar(mappable=mappable, cax=ax3)"}
{"predictions": ["df['text'].str.split().value_counts().head(100)", "df['text'].str.split().value_counts()[:100]", "df['text'].value_counts()[:100]", "df['text'].value_counts()[:100]", "df['text'].value_counts().head(100)", "df['text'].value_counts()[:100]", "df['text'].str.split().value_counts().head(100)", "df['text'].str.split().value_counts()[:100]", "df['text'].value_counts()[:100]", "df['text'].value_counts().head(100)"], "references": "Counter(' '.join(df['text']).split()).most_common(100)"}
{"predictions": ["datetime.datetime.now(datetime.timezone.utc)", "datetime.now(tz=timezone.utc)", "datetime.now(tz=pytz.utc)", "datetime.now(tz=timezone.utc)", "datetime.now(timezone.utc)", "datetime.now(timezone.utc)", "pd.Timestamp.today(tz='UTC')", "datetime.now(timezone.utc)", "datetime.datetime.now(datetime.timezone.utc)", "datetime.now(timezone.utc)"], "references": "datetime.now(pytz.utc)"}
{"predictions": ["json.dumps(data)", "return JsonResponse(data)", "return JsonResponse(data, safe=False)", "json.loads(data)", "json.dumps(data, indent=4)", "json.dumps(data)", "json.dumps(data)", "response.json()['data']", "json.dumps(data, indent=2)", "json.dumps(data)"], "references": "HttpResponse(data, content_type='application/json')"}
{"predictions": ["subprocess.Popen(['python', 'background-process.py', 'arguments'])", "subprocess.Popen(['python', 'background-process.py', 'arguments'])", "subprocess.Popen(['python3', 'background-process.py', 'arguments'])", "subprocess.Popen(['python', 'background-process.py', 'arguments'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)", "subprocess.Popen(['python', 'background-process.py', 'arguments'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)", "subprocess.Popen(['python', 'background-process.py', 'arguments'], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)", "subprocess.Popen(['python', 'background-process.py', 'arguments'], stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)", "subprocess.Popen(['python', 'background-process.py', 'arguments'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "subprocess.Popen(['python', 'background-process.py', 'arguments'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "subprocess.Popen(['python', 'background-process.py', 'arguments'])"], "references": "subprocess.Popen(['background-process', 'arguments'])"}
{"predictions": ["s.split()", "s.split()", "s.split()", "re.split(r'\\s+', s)", "s.split()", "s.split(' ')", "s.split(' ')", "s.split(' ')", "s.split(' ')", "s.split(' ')"], "references": "re.split('(\\\\W+)', s)"}
{"predictions": ["df.plot(kind='bar', stacked=True)", "df.plot.bar(stacked=True)", "df.plot(kind=\"bar\", stacked=True)", "df.plot.bar(stacked=True)", "ax = df.plot.bar(stacked=True)", "df.plot(kind='bar', stacked=True)", "import matplotlib.pyplot as plt", "df.plot.bar(stacked=True)", "df.plot.bar(stacked=True)", "fig, ax = plt.subplots()"], "references": "df.plot(kind='barh', stacked=True)"}
{"predictions": ["[i for i in range(len(myList)) if myList[i].find('how')!= -1 and myList[i].find('what')!= -1]", "[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]]", "[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]][0]", "[i for i in range(len(myList)) if myList[i].find('how') ", "[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]]", "[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]]", "[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]]", "[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]]", "[i for i in range(len(myList)) if myList[i].find('how') ", "[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]]"], "references": "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"}
{"predictions": ["out.apply(lambda x: pd.DataFrame({'out-1': x[0], 'out-2': x[1]}))", "out.apply(lambda x: pd.DataFrame({'out-1': x[0], 'out-2': x[1]}), axis=1)", "out.apply(lambda x: pd.DataFrame({'out-1': x[0], 'out-2': x[1]}))", "out.apply(lambda x: pd.Series(x, index=['out-1', 'out-2']), axis=1)", "out = pd.DataFrame(list(zip(out_1, out_2)), columns=['out-1', 'out-2'])", "out.apply(lambda x: pd.DataFrame({'out-1':x[0], 'out-2':x[1]}))", "out = pd.DataFrame(list(zip(out_1, out_2)), columns=['out-1', 'out-2'])", "out.apply(lambda x: pd.DataFrame({'out-1':x[0], 'out-2':x[1]}), axis=1)", "out.apply(lambda x: pd.DataFrame({'out-1':x[0], 'out-2':x[1]}))", "out.apply(lambda x: pd.DataFrame({'out-1': x[0], 'out-2': x[1]}), axis=1)"], "references": "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"}
{"predictions": ["ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')", "ax.set_xticklabels(ax.get_xticklabels(),rotation=45)", "ax.set_xticklabels(ax.get_xticklabels(), rotation = 45)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=8)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=10)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')"], "references": "ax.set_xticklabels(labels, rotation=45)"}
{"predictions": ["re.findall(r'[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][", "re.findall('\\\\\\\\x[0-9a-fA-F]{2}', s)", "re.findall(r'[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]", "re.findall(r'[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]|[0-7][0-7][0-7][0-7][0-7][0-", "re.findall(r'[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]', s)", "re.findall(r'[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]', s)", "re.findall(r'[0-7][0-7][0-7][0-7]', s)", "re.findall(r'[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]', s)", "re.findall(r'[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]|[0-7][0-7][0-7][0-7][0-7]|[", "re.findall(r'[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]',s)"], "references": "re.findall(\"'\\\\\\\\[0-7]{1,3}'\", s)"}
{"predictions": ["len(yourdict.keys())", "len(yourdict)", "len(yourdict)", "yourdict.keys()", "yourdict.__len__()", "yourdict.keys()", "len(yourdict)", "len(yourdict.keys())", "list(yourdict.keys())", "len(yourdict)"], "references": "len(list(yourdict.keys()))"}
{"predictions": ["len(yourdictfile)", "len(yourdictfile.keys())", "len(yourdictfile)", "yourdictfile.keys()", "yourdictfile.keys()", "len(yourdictfile)", "yourdictfile.__len__()", "count(yourdictfile.keys())", "len(yourdictfile.keys())", "yourdictfile.keys().count()"], "references": "len(set(open(yourdictfile).read().split()))"}
{"predictions": ["df.groupby('id').first()", "df.groupby('id').head(1)", "df.groupby('id').first()", "df.groupby('id')[0].first()", "df.groupby('id').head(1)", "df.groupby('id').head()", "df.groupby('id')", "df.groupby(['id']).first()", "df.groupby('id')[0]", "df.groupby('id')[0].head()"], "references": "df.groupby('id').first()"}
{"predictions": ["df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], index=['a', 'b', 'c'], columns=['one', 'two', 'three'])", "df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], index=['a', 'b', 'c'], columns=['x', 'y', 'z'])", "df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])", "df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])", "df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])", "df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], columns=['a', 'b', 'c'])", "df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])", "df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], columns=['a', 'b', 'c'])", "df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])", "df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=['a', 'b', 'c'])"], "references": "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"}
{"predictions": ["subprocess.call('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', shell=True)", "subprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "subprocess.call('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', shell=True)", "subprocess.check_output('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', shell=True)", "subprocess.run(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "subprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "subprocess.call('\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"')", "subprocess.run(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'], shell=True)", "subprocess.call('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')", "subprocess.call('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')"], "references": "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"}
{"predictions": ["q.reverse()", "q = list(reversed(q))", "import heapq", "q = queue.PriorityQueue()", "q.reverse()", "q.reverse()", "q.reverse()", "q = q[::-1]", "q.reverse()", "q.reverse()"], "references": "for n in [1,3,4,2]: q.put((-n, n))"}
{"predictions": ["np.concatenate((a, b), axis=0)", "np.concatenate((a, b), axis=0)", "np.concatenate((a,b), axis=0)", "np.concatenate([a, b], axis=0)", "np.concatenate((a,b), axis=0)", "np.concatenate((a, b))", "numpy.concatenate((a, b), axis=0)", "np.concatenate((a,b))", "np.concatenate((a,b),axis=0)", "np.concatenate([a, b], axis=0)"], "references": "np.concatenate((a, b), axis=0)"}
{"predictions": ["np.concatenate((a, b), axis=1)", "np.concatenate((a,b), axis=1)", "np.concatenate((a, b), axis=1)", "np.concatenate([a, b], axis=1)", "np.concatenate((a, b), 1)", "np.concatenate((a,b), axis=1)", "np.concatenate((a,b),axis=1)", "np.concatenate((a, b))", "numpy.concatenate((a, b), axis=1)", "np.concatenate((a, b), axis=1)"], "references": "np.concatenate((a, b), axis=1)"}
{"predictions": ["np.concatenate((a, b), axis=0)", "np.concatenate((a, b), axis=0)", "np.concatenate((a,b), axis=0)", "np.concatenate([a, b], axis=0)", "np.concatenate((a,b), axis=0)", "np.concatenate((a, b))", "numpy.concatenate((a, b), axis=0)", "np.concatenate((a,b))", "np.concatenate((a,b),axis=0)", "np.concatenate([a, b], axis=0)"], "references": "np.r_[(a[None, :], b[None, :])]"}
{"predictions": ["np.concatenate((a, b), axis=0)", "np.concatenate((a, b), axis=0)", "np.concatenate((a,b), axis=0)", "np.concatenate([a, b], axis=0)", "np.concatenate((a,b), axis=0)", "np.concatenate((a, b))", "numpy.concatenate((a, b), axis=0)", "np.concatenate((a,b))", "np.concatenate((a,b),axis=0)", "np.concatenate([a, b], axis=0)"], "references": "np.array((a, b))"}
{"predictions": ["return HttpResponse('Unauthorized', status=401)", "return HttpResponse(\"Unauthorized\", status=401)", "return HttpResponse('401 Unauthorized', status=401)", "return HttpResponse(\"401 Unauthorized\", status=401)", "return HttpResponse('Unauthorized', status=401)", "return HttpResponse('401 Unauthorized', content_type='text/plain')", "return HttpResponse('Unauthorized', status=401)", "return HttpResponse('401 Unauthorized', content_type='application/json')", "return HttpResponse(status=401)", "return HttpResponse('Unauthorized', status=401)"], "references": "HttpResponse('Unauthorized', status=401)"}
{"predictions": ["c2.sort(key=lambda x: x[::-1])", "c2.sort(key=lambda x: x[1], reverse=True)", "c2.sort(key=lambda x: x[0], reverse=True)", "sorted(c2, key=lambda x: x[1], reverse=True)", "c2.sort(key=lambda x: x[::-1])", "c2.sort(key=lambda x: x[1], reverse=True)", "c2.sort(key=lambda x: x[0], reverse=True)", "c2.sort(reverse=True)", "c2.sort(key=lambda x: x[1], reverse=True)", "c2.sort(reverse=True)"], "references": "c2.sort(key=lambda row: (row[2], row[1], row[0]))"}
{"predictions": ["sorted(c2, key=lambda x: (x[2], x[1]))", "c2.sort(key=lambda x: (x[2], x[1]))", "sorted(c2, key=lambda x: (x[2], x[1]))", "sorted(c2, key=lambda x: (x[1], x[2]))", "c2.sort(key=lambda x: (x[1], x[2]))", "c2.sort(key=lambda x: (x[2], x[1]))", "sorted(c2, key=lambda x: (x[1], x[2]))", "c2 = sorted(c2, key=lambda x: (x[2], x[1]))", "sorted(c2, key=lambda x: (x[0], x[1]))", "c2.sort(key=lambda x: x[2], reverse=True)"], "references": "c2.sort(key=lambda row: (row[2], row[1]))"}
{"predictions": ["df.get_loc(bob)", "df.index.get_loc(bob)", "df.get_loc('bob')", "df.index[df['name'] == 'Bob']", "df.index[df['name'] == 'bob']", "df.loc[df['name'] == 'Bob']", "df.loc[df['name'] == 'bob']", "df.index.get_loc('bob')", "df.index(bob)", "df.loc[df['name'] == 'bob']"], "references": "df.index.get_loc('bob')"}
{"predictions": ["my_list = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "import numpy as np", "my_list = np.array([1,2,3,4,5,6,7,8,9,10])", "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "my_list = [1,2,3,4,5,6,7,8,9,10]", "my_list = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])", "my_list = np.array([1,2,3,4,5,6,7,8,9])", "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]"], "references": "my_list = []"}
{"predictions": ["bytearray.fromhex(hex_str)", "bytes.fromhex(hex_str)", "binascii.unhexlify(hex_str)", "bytes.fromhex(hex_str)", "bytes.fromhex(hex_str)", "bytes.fromhex(hex_str)", "bytearray.fromhex(hex_str)", "binascii.a2b_hex(hex_str)", "bytes.fromhex(hex_str)", "bytes.fromhex(hex_str)"], "references": "bytes.fromhex(hex_str.replace('\\\\x', ''))"}
{"predictions": ["np.array([[1, 2, 3],", "np.array([[1, 2, 3], [4, 5, 6]])", "np.array([[1, 2, 3], [4, 5, 6]])", "pd.DataFrame([[1, 2, 3], [4, 5, 6]])", "[[1, 4], [2, 5], [3, 6]]", "matrix([[1, 2, 3],", "array([[1, 2, 3],", "np.array([[1,2,3],[4,5,6]])", "np.array([[1, 2, 3],[4, 5, 6]])", "array([[1, 2, 3],"], "references": "np.column_stack(([1, 2, 3], [4, 5, 6]))"}
{"predictions": ["next(g)", "next(g)", "next(g)[4]", "g.next()[4]", "g[4]", "g[4]", "next(g)[4]", "g.next()", "list(g)[4]", "list(g)[4]"], "references": "next(itertools.islice(g, 5, 5 + 1))"}
{"predictions": ["f'{word}'", "re.sub('[^\\\\x00-\\\\x7F]+','', word)", "re.sub('[^\\\\x00-\\\\x7F]+','', word).encode('utf-8')", "re.sub('[^\\\\x00-\\\\x7F]+','', word.encode('utf-8'))", "str(word)", "str.format(word)", "re.sub('[^\\\\x00-\\\\x7F]+','', word)", "re.sub('[^\\\\x00-\\\\x7F]+','', word)", "re.sub('[^\\\\x00-\\\\x7F]+','', word)", "re.sub('[^\\\\x00-\\\\x7F]+','', word)"], "references": "'\"{}\"'.format(word)"}
{"predictions": ["with open(filename, 'r') as f:", "with open(filename) as f:", "with open(filename) as f:", "with open(filename, 'r') as file:", "with open(filename) as file:", "with open(filename, 'r') as f:", "with open(filename) as f:", "data = []", "with open(filename) as f:", "f = open(filename, 'r')"], "references": "data = [line.strip() for line in open(filename, 'r')]"}
{"predictions": ["re.sub('i', '', 'it is icy')", "re.sub(r'i', '', it is icy)", "it_is_icy = it_is_icy.replace('i', '')", "re.sub('i', '', it_is_icy)", "re.sub('i', '', it is icy)", "re.sub('i', '', it is icy)", "re.sub('i', '', it is icy)", "re.sub('i', '', it is icy)", "re.sub('i', '', it is icy)", "re.sub('i', '', it is icy)"], "references": "\"\"\"\"\"\".join([char for char in 'it is icy' if char!= 'i'])"}
{"predictions": ["re.sub('i', '', it is icy)", "re.sub('i', '', 'it is icy')", "'it is icy'.replace('i', '')", "s = s.replace('i', '')", "re.sub(r'i', '', it is icy)", "re.sub('i', '', it is icy)", "s.replace('i', '', s.count('i'))", "re.sub('i', '', it is icy')", "re.sub('i', '', 'it is icy')", "s = 'it is icy'"], "references": "re.sub('i', '', 'it is icy')"}
{"predictions": ["re.sub('i', '', it is icy)", "re.sub('i', '', 'it is icy')", "s = s.replace('i', '')", "re.sub('i', '', \"it is icy\")", "s = s.replace(\"i\", \"\")", "\"it is icy\".replace(\"i\", \"\")", "re.sub(r'i', '', it is icy)", "re.sub('i', '', it is icy)", "s = s.replace(\"i\", \"\")", "re.sub('[i]', '', it is icy)"], "references": "\"\"\"it is icy\"\"\".replace('i', '')"}
{"predictions": ["list(map(int, intstringlist))", "[int(i) for i in intstringlist]", "[int(x) for x in intstringlist]", "[int(s) for s in intstringlist]", "intstringlist = list(map(int, intstringlist))", "nums = list(map(int, intstringlist))", "list(map(int, intstringlist))", "[int(i) for i in intstringlist]", "[int(x) for x in intstringlist]", "nums = list(map(int, intstringlist))"], "references": "nums = [int(x) for x in intstringlist]"}
{"predictions": ["[f for f in os.listdir('/mydir') if f.endswith('.txt')]", "for file in os.listdir('/mydir'):", "for file in os.listdir('mydir'):", "for file in files:", "[f for f in os.listdir('mydir') if f.endswith('.txt')]", "for file in os.listdir('/mydir'):", "for file in files:", "[f for f in os.listdir('mydir') if f.endswith('.txt')]", "[f for f in os.listdir('/mydir') if f.endswith(\".txt\")]", "for file in files:"], "references": "\n\tos.chdir('/mydir')\n\tfiles = [] \n\tfor file in glob.glob('*.txt'):\n\t\tfiles.append(file)\n"}
{"predictions": ["[f for f in os.listdir(\"/mydir\") if os.path.isfile(os.path.join(\"/mydir\", f)) and f.endswith(\".txt\")]", "[f for f in os.listdir(\"/mydir\") if os.path.isfile(os.path.join(\"/mydir\", f)) and f.endswith('.txt')]", "for file in os.listdir(\"/mydir\"):", "for filename in os.listdir(\"/mydir\"):", "for file in os.listdir(\"mydir\"):", "for file in os.listdir(\"/mydir\"):", "for file in os.listdir('/mydir'):", "[f for f in os.listdir(\"/mydir\") if os.path.isfile(os.path.join(\"/mydir\", f)) and f.endswith(\".txt\")]", "[f for f in os.listdir(\"/mydir\") if os.path.isfile(os.path.join(\"/mydir\", f)) and f.endswith(\".txt\") ]", "for file in os.listdir('/mydir'):"], "references": "[file for file in os.listdir('/mydir') if file.endswith('.txt')]"}
{"predictions": ["[f for f in os.listdir(\"/mydir\") if os.path.isfile(os.path.join(\"/mydir\", f)) and f.endswith(\".txt\")]", "[f for f in os.listdir(\"/mydir\") if os.path.isfile(os.path.join(\"/mydir\", f)) and f.endswith('.txt')]", "for file in os.listdir(\"/mydir\"):", "for filename in os.listdir(\"/mydir\"):", "for file in os.listdir(\"mydir\"):", "for file in os.listdir(\"/mydir\"):", "for file in os.listdir('/mydir'):", "[f for f in os.listdir(\"/mydir\") if os.path.isfile(os.path.join(\"/mydir\", f)) and f.endswith(\".txt\")]", "[f for f in os.listdir(\"/mydir\") if os.path.isfile(os.path.join(\"/mydir\", f)) and f.endswith(\".txt\") ]", "for file in os.listdir('/mydir'):"], "references": "[file for (root, dirs, files) in os.walk('/mydir') for file in files if file.endswith('.txt')]"}
{"predictions": ["pd.date_range(start='20130226', end='20130302', freq='D').strftime('%Y%m%d')", "pd.date_range(start='20130226', end='20130302', freq='D').strftime('%Y%m%d').tolist()", "pd.date_range('20130226', '20130302', freq='D').strftime('%Y%m%d').tolist()", "pd.date_range(start='20130226', end='20130302').strftime('%Y%m%d').tolist()", "pd.date_range(start='20130226', end='20130302', freq='D').strftime('%Y%m%d')", "pd.date_range('20130226', '20130302', freq='D').strftime('%Y%m%d').tolist()", "pd.date_range('20130226', '20130302', freq='D').strftime('%Y%m%d')", "pd.date_range(start='20130226', end='20130302').strftime('%Y%m%d').tolist()", "pd.date_range('20130226', '20130302', freq='D').strftime('%Y%m%d')", "pd.date_range('20130226', '20130302').strftime('%Y%m%d').tolist()"], "references": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]"}
{"predictions": ["request_body = json.loads(request_body)", "request_body = json.loads(request_body)", "json.loads(request_body)", "json.loads(request_body)", "json.loads(request_body)", "json.loads(request_body)", "json.loads(request_body)", "json.loads(request_body)", "json.loads(request_body)", "json.loads(request_body)"], "references": "json.loads(request_body)"}
{"predictions": ["[x for x in lst if isinstance(x, int)]", "[i for i in lst if isinstance(i, int)]", "list(filter(lambda x: isinstance(x, int), lst))", "lst = list(filter(lambda x: isinstance(x, int), lst))", "[int(i) for i in lst if isinstance(i, int)]", "[int(x) for x in lst if isinstance(x, int)]", "list(filter(lambda x: isinstance(x, int), lst))", "[int(i) for i in lst if isinstance(i, int)]", "[x for x in lst if isinstance(x, int)]", "lst = list(filter(lambda x: isinstance(x, int), lst))"], "references": "[element for element in lst if isinstance(element, int)]"}
{"predictions": ["list_of_dicts.sort(key=lambda x: x['name'])", "sorted(list_of_dicts, key=lambda x: x['name'])", "list_of_dicts.sort(key=lambda x: x['name'])", "sorted(list_of_dicts, key=lambda x: x['name'])", "sorted(list_of_dicts, key=lambda k: k['name'])", "list(sorted(list_of_dicts, key=lambda x: x['name']))", "sorted(list_of_dicts, key=lambda d: d['name'])", "list_of_dicts.sort(key=lambda x: x[\"name\"])", "sorted(list_of_dicts, key=lambda i: i['name'])", "list_of_dicts.sort(key=lambda x:x['name'])"], "references": "list_of_dicts.sort(key=operator.itemgetter('name'))"}
{"predictions": ["list_of_dicts.sort(key=lambda x: x['age'])", "sorted(list_of_dicts, key=lambda x: x['age'])", "list_of_dicts.sort(key=lambda x: x['age'])", "sorted(list_of_dicts, key=lambda x: x['age'])", "sorted(list_of_dicts, key=lambda k: k['age'])", "list(sorted(list_of_dicts, key=lambda x: x['age']))", "list_of_dicts.sort(key=lambda x: x[\"age\"])", "sorted(list_of_dicts, key=lambda d: d['age'])", "sorted(list_of_dicts, key=lambda i: i['age'])", "list_of_dicts.sort(key=lambda x: x.get('age'))"], "references": "list_of_dicts.sort(key=operator.itemgetter('age'))"}
{"predictions": ["df.groupby('prots')['scores'].sum().sort_values(ascending=False)", "df.sort_values(by='scores', ascending=False, ignore_index=True).groupby('prots')", "df.sort_values(by='scores', ascending=False, ignore_index=True).groupby('prots').head(1)", "df.sort_values(by='scores', ascending=False, ignore_index=True).groupby('prots')['scores'].sum().sort_values(ascending=False).plot(kind='bar')", "df.sort_values(by='scores', ascending=False, ignore_index=True).groupby('prots')['scores'].sum().sort_values(ascending=False).reset_index()", "df.sort_values(by='scores', ascending=False, ignore_index=True).groupby('prots')['scores'].sum().sort_values(ascending=False)", "df.sort_values(by='scores', ascending=False, ignore_index=True).groupby('prots')['scores'].sum().sort_values(ascending=False).head(10)", "df.sort_values(by='scores', ascending=False, ignore_index=True).groupby('prots')['scores'].sum().sort_values(ascending=False)", "df.sort_values(by='scores', ascending=False, ignore_index=True).groupby('prots')['scores'].sum().sort_values(ascending=False).reset_index()", "df.sort_values(by='scores', ascending=False, ignore_index=True).groupby('prots')['scores'].sum().sort_values(ascending=False)"], "references": "df.groupby('prots').sum().sort_values('scores', ascending=False)"}
{"predictions": ["list.sort(key=lambda x: (x['points'], x['time']))", "sorted(list, key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda x: (x['points'], x['time']))", "sorted(list, key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda x: (x.get('points'), x.get('time')))", "sorted(list, key=lambda k: (k['points'], k['time']))", "sorted(list, key=lambda x: (x.get('points'), x.get('time')))", "list.sort(key=lambda x: (x[\"points\"], x[\"time\"]))", "sorted(list, key=lambda i: (i['points'], i['time']))", "list(sorted(list, key=lambda x: (x['points'], x['time'])))"], "references": "list.sort(key=lambda item: (item['points'], item['time']))"}
{"predictions": ["pd.to_numeric(number, downcast='integer')", "pd.to_numeric(number, errors='coerce')", "int(number)", "int(number)", "number % 2", "number_to_int(number)", "pd.to_numeric(number, errors='ignore')", "pd.to_numeric(number, downcast='integer')", "pd.to_numeric(number, downcast=\"integer\")", "number % 2"], "references": "struct.unpack('H', struct.pack('h', number))"}
{"predictions": ["df.to_csv(filename, index=False)", "df.to_csv(filename, index=False)", "df.to_csv(filename, index=False)", "df.to_csv(filename, index=False)", "df.to_csv('filename.csv', index=False)", "df.to_csv('filename', index=False)", "df.to_csv(filename, index=False)", "df.to_csv(filename)", "df.to_csv('filename', index=False)", "df.to_csv(filename, index=False)"], "references": "df.to_csv(filename, index=False)"}
{"predictions": ["json.loads(unescaped)", "unescaped = urllib.parse.unquote(unescaped)", "unescaped = urllib.parse.unquote(unescaped)", "unescaped = urllib.parse.unquote_plus(unescaped)", "urllib.parse.unquote_plus(unescaped)", "urllib.parse.unquote_plus(unescaped)", "json.loads(unescaped)", "json.loads(unescaped)", "json.loads(unescaped)", "urllib.parse.unquote(unescaped)"], "references": "json_data = json.loads(unescaped)"}
{"predictions": ["newFileBytes.tofile(newFile)", "newFileBytes.tofile(newFile)", "with open(newFile, 'wb') as newFileBytes:", "with open(newFile, 'wb') as f:", "with open(newFile, 'wb') as f:", "with open('newFile', 'wb') as newFile:", "with open('newFile', 'wb') as f:", "with open('newFileBytes', 'wb') as f:", "with open(newFile, 'wb') as newFile:", "with open('newFile', 'wb') as f:"], "references": "newFile.write(struct.pack('5B', *newFileBytes))"}
{"predictions": ["dict.keys()[-1]", "dict.keys()[-1]", "dict.keys()[-1]", "list(dict.keys())[-1]", "dict.keys()[-1]", "list(dict.keys())[-1]", "list(dict.keys())[-1]", "dict(sorted(dict.items(), key=lambda x: x[1], reverse=True)[0])", "dict(sorted(dict.items(), key=lambda x: x[1], reverse=True))[0]", "dict(sorted(dict.items(), key=lambda x: x[1], reverse=True)[0])"], "references": "list(dict.keys())[-1]"}
{"predictions": ["datetime.datetime.now()", "datetime.datetime.now()", "datetime.now()", "dt = datetime.datetime.now()", "pd.datetime.now()", "now = datetime.datetime.now()", "now = datetime.now()", "dt.datetime.now()", "pd.to_datetime('now')", "datetime.now()"], "references": "datetime.datetime.now()"}
{"predictions": ["np.max(np.abs(x))", "np.amax(np.absolute(x))", "np.argmax(np.abs(x))", "np.max(np.abs(x), axis=1)", "np.max(np.abs(x), axis=0)", "np.amax(np.absolute(x), axis=0)", "np.max(np.abs(x), axis=1)", "np.max(np.abs(x))", "np.amax(np.absolute(x), axis=1)", "np.max(np.abs(x), axis=0)"], "references": "max(x.min(), x.max(), key=abs)"}
