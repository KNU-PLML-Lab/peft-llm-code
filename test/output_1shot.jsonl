{"predictions": ["print(binascii.unhexlify(b'4a4b4c').decode('utf-8'))", "print(bytes.fromhex('4a4b4c').decode('utf-8'))", "print(bytes.fromhex('4a4b4c').decode('utf-8'))", "print(bytes.fromhex('4a4b4c').decode('utf-8'))", "s = '4a4b4c'", "print(bytes.fromhex('4a4b4c').decode('utf-8'))", "print(bytes.fromhex('4a4b4c').decode('utf-8'))", "print(bytes.fromhex('4a4b4c').decode('utf-8'))", "s = '4a4b4c'", "print(bytes.fromhex('4a4b4c').decode('utf-8'))"], "references": "bytes.fromhex('4a4b4c').decode('utf-8')"}
{"predictions": ["d = d.encode('cp1251').decode('utf-8')", "d = d.decode('cp1251').encode('utf-8')", "d.encode('cp1251').decode('utf-8')", "d = d.encode('cp1251').decode('utf8')", "d = d.encode('cp1251').decode('utf-8')", "d = d.encode(\"cp1251\").decode(\"utf-8\")", "print(d.encode('cp1251').decode('utf-8'))", "d = d.decode('cp1251').encode('utf8')", "d = d.encode('cp1251').decode('cp1251')", "d = d.encode('cp1251').decode('utf-8')"], "references": "d.decode('cp1251').encode('utf8')"}
{"predictions": ["ps -ef | grep python | wc -l", "p = subprocess.Popen(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'], stdout=subprocess.PIPE)", "p = subprocess.Popen(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "p = subprocess.Popen(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'], stdout=subprocess.PIPE)", "p = subprocess.Popen(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'], stdout=subprocess.PIPE)", "p = subprocess.Popen(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'], stdout=subprocess.PIPE)", "p = subprocess.Popen(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'], stdout=subprocess.PIPE)", "p = subprocess.Popen(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'], stdout=subprocess.PIPE)", "p = subprocess.Popen(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'], stdout=subprocess.PIPE)", "ps -ef | grep python | wc -l"], "references": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"}
{"predictions": ["s1.intersection(s2)", "intersection = s1.intersection(s2)", "s1.intersection(s2)", "intersection = set(s1).intersection(set(s2))", "s1.intersection(s2)", "set(s1).intersection(set(s2))", "s1 & s2", "s1.intersection(s2)", "s1.intersection(s2)", "s1.intersection(s2)"], "references": "pd.Series(list(set(s1).intersection(set(s2))))"}
{"predictions": ["when = datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S')", "when = datetime.datetime.strptime(when, \"%Y-%m-%d %H:%M:%S\")", "when = datetime.strptime(when, '%Y-%m-%d %H:%M:%S.%f')", "when = datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S.%f')", "when = datetime.strptime(when, '%Y-%m-%dT%H:%M:%SZ')", "when = datetime.strptime(when, '%Y-%m-%dT%H:%M:%S.%fZ')", "when = datetime.strptime(when, '%Y-%m-%dT%H:%M:%S.%f')", "when = datetime.strptime(when, '%Y-%m-%d %H:%M:%S')", "when = datetime.strptime(when, '%Y-%m-%d %H:%M:%S')", "datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S')"], "references": "datetime.datetime.strptime(when, '%Y-%m-%d').date()"}
{"predictions": ["a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "a = np.array([[1, 2, 3],", "a = np.array([[1,2,3],[4,5,6],[7,8,9]])", "import numpy as np", "np.sum(a, axis=0)", "import numpy as np", "a = np.array([[1, 2, 3], [4, 5, 6]])", "a = np.array([[1, 2], [3, 4]])", "a = np.array([[1,2,3],[4,5,6]])", "a = np.array([[1,2,3],[4,5,6],[7,8,9]])"], "references": "a.sum(axis=1)"}
{"predictions": ["import warnings", "import warnings", "with warnings.catch_warnings():", "import warnings", "import warnings", "warnings.filterwarnings('always')", "import warnings", "import warnings", "import warnings", "warnings.simplefilter('always')"], "references": "warnings.simplefilter('always')"}
{"predictions": ["datetime.datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "datetime.datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "datetime.datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "datetime.datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "datetime.datetime.strptime('30/03/09 16:31:32.123', '%Y/%m/%d %H:%M:%S.%f')", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "datetime.datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f').timestamp()", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')"], "references": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')"}
{"predictions": ["import sys", "import os", "import sys", "sys.path.append('/path/to/whatever')", "sys.path.insert(0, '/path/to/whatever')", "import os", "sys.path.append('/path/to/whatever')", "os.chdir('/path/to/whatever')", "import os", "sys.path.append('/path/to/whatever')"], "references": "sys.path.append('/path/to/whatever')"}
{"predictions": ["urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "import urllib.request", "import urllib", "urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\",\"mp3.mp3\")", "import urllib.request", "r = requests.get(\"http://www.example.com/songs/mp3.mp3\")", "import urllib", "r = requests.get(\"http://www.example.com/songs/mp3.mp3\")", "url = \"http://www.example.com/songs/mp3.mp3\"", "import urllib.request"], "references": "urllib.request.urlretrieve('https://github.com/zorazrw/multilingual-conala/blob/master/dataset/test/es_test.json','mp3.mp3')"}
{"predictions": ["import urllib.request", "import urllib", "urllib.request.urlretrieve('http://www.example.com/', 'example.com')", "urllib.request.urlretrieve('http://www.example.com/', 'example.html')", "urllib.request.urlretrieve('http://www.example.com/', 'example.txt')", "import urllib", "with urllib.request.urlopen('http://www.example.com/') as f:", "import urllib.request", "urllib.request.urlretrieve('http://www.example.com/')", "urlretrieve('http://www.example.com/', 'example.com')"], "references": "html = urllib.request.urlopen(url).read()"}
{"predictions": ["urllib.request.urlretrieve(url, filename)", "with urllib.request.urlopen(url) as response:", "with urllib.request.urlopen(url) as f:", "import urllib.request", "import urllib.request", "urllib.request.urlretrieve(url)", "with urlopen(url) as f:", "with urllib.request.urlopen(url) as file:", "with urllib.request.urlopen(url) as url:", "with urllib.request.urlopen(url) as f:"], "references": "requests.get(url)"}
{"predictions": ["with urllib.request.urlopen(url) as response, open('10MB', 'wb') as out_file:", "r = requests.get(url, stream=True)", "r = requests.get(url, stream=True)", "with urllib.request.urlopen(url) as f:", "r = requests.get(url, stream=True)", "urllib.request.urlretrieve(url, \"10MB\")", "r = requests.get(url, stream=True)", "response = requests.get(url, stream=True)", "with urllib.request.urlopen(url) as f:", "with urllib.request.urlopen(url) as response:"], "references": "\n\tresponse = requests.get(url, stream=True)\n\twith open('10MB', 'wb') as handle:\n\t\tfor data in response.iter_content():\n\t\t\thandle.write(data)\n\t"}
{"predictions": ["np.matmul(P, T)", "np.matmul(P,T)", "P.dot(T)", "from scipy.sparse import csr_matrix", "from scipy.linalg import block_diag", "np.matmul(P, T)", "P.dot(T)", "P.dot(T)", "from scipy.sparse import csr_matrix", "P.dot(T)"], "references": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"}
{"predictions": ["float.fromhex('470FC614')", "int('470FC614', 16)", "float(0x470FC614)", "float(int('470FC614', 16))", "float(hex_string)", "float(0x470fc614)", "int('470FC614',16)", "float('0x470FC614')", "float(int('470FC614',16))", "float.fromhex('470FC614')"], "references": "struct.unpack('!f', bytes.fromhex('470FC614'))[0]"}
{"predictions": ["users.sort(reverse=True)", "users = users[::-1]", "numbers = list(range(1, 11))", "for i in range(1, 11):", "nums = list(range(1, 11))", "a = list(range(1, 11))", "for i in range(1,11):", "numbers = list(range(1,11))", "a = list(range(1,11))", "users.reverse()"], "references": "list(reversed(list(range(10))))"}
{"predictions": ["now = datetime.datetime.now()", "today = datetime.datetime.now()", "today = datetime.date.today()", "from datetime import date, timedelta", "today = datetime.datetime.today()", "from datetime import datetime, timedelta", "from datetime import datetime, timedelta", "from datetime import datetime,timedelta", "today = datetime.date.today()", "from datetime import datetime, timedelta"], "references": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"}
{"predictions": ["base64.b64encode(b'your string')", "base64.b64encode('your string')", "import base64", "import base64", "import base64", "import base64", "base64.b64encode('your string'.encode('utf-8'))", "base64.b64encode('your string')", "import base64", "encoded = base64.b64encode('your string')"], "references": "base64.b64encode(bytes('your string', 'utf-8'))"}
{"predictions": ["url_param = request.args.get('myParam')", "url_param = flask.request.args.get('myParam')", "@app.route('/')", "url = request.args.get('myParam')", "@app.route('/')", "url_param = request.args.get('myParam')", "return request.args.get('myParam')", "url_param = request.args.get('myParam', None)", "@app.route('/')", "url_param = request.args.get('myParam')"], "references": "request.args['myParam']"}
{"predictions": ["for i in mylist:", "duplicates = []", "duplicates = []", "duplicates = []", "mylist.sort(key=lambda x: mylist.count(x))", "mylist.sort(key=lambda x: mylist.index(x))", "duplicates = []", "duplicates = []", "duplicates = []", "mylist.sort(key=lambda x: x)"], "references": "[k for k, v in list(Counter(mylist).items()) if v > 1]"}
{"predictions": ["x = x.split('-')", "x.rsplit('-', 1)", "x.split('-')", "x.rsplit('-')", "x.rsplit('-',1)", "x = x.split(\"-\")", "x = x.split('-')[0]", "x.split('-')[0]", "x.split('-')", "x.split(\"-\")"], "references": "x.rpartition('-')[0]"}
{"predictions": ["def last_part(s):", "def last_part(s):", "def last_part(s):", "users[-1]['name'].split('-')[-1]", "users[-1]['name'].split('-')[0]", "def last_part(s):", "def last_part(s):", "users[-1]['name'].split('-')[1]", "def last_part(string):", "def last_part(string):"], "references": "x.rsplit('-', 1)[0]"}
{"predictions": ["import random", "import random", "import random", "import random", "import random", "import random", "random_list = random.sample(range(100), 10)", "import random", "import random", "import random"], "references": "[int(1000 * random.random()) for i in range(10000)]"}
{"predictions": ["print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f'))", "print(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S.%f\"))", "print(time.strftime('%Y-%m-%d %H:%M:%S.%f', time.localtime(time.time())))", "print(time.strftime('%Y-%m-%d %H:%M:%S.%f', time.localtime()))", "print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f'))", "print(time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time())))", "print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3])", "print(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f'))", "print(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S.%f\"))", "print(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S.%f\")[:-3])"], "references": "datetime.datetime.now().strftime('%H:%M:%S.%f')"}
{"predictions": ["for i in range(len(tab)):", "tab = [[1, 2, 3],", "tab = [[1,2,3],", "for i in range(0, len(tab)):", "tab = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "for i in range(len(tab)):", "for i in range(len(tab)):", "for i in range(len(users)):", "tab = [[1,2,3],[4,5,6],[7,8,9]]", "tab = [[1,2,3],[4,5,6],[7,8,9]]"], "references": "'\\n'.join('\\t'.join(str(col) for col in row) for row in tab)"}
{"predictions": ["\"goals: {goals}, penalties: {penalties}\".format(goals=goals, penalties=penalties)", "goals = f'{goals[0]} - {goals[1]}'", "goals = f\"{goals}\"", "goals = f\"{goals[0]}, {goals[1]}, {goals[2]}\"", "goals = f'{goals}'", "goals = f'{goals}'", "goals = f'{goals}'", "\"goals: {goals}, penalties: {penalties}\".format(goals=goals, penalties=penalties)", "goals = f'{goals}'", "goals = f'{goals}'"], "references": "\"\"\"({:d} goals, ${:d})\"\"\".format(goals, penalties)"}
{"predictions": ["df.apply(lambda x: x[x!= 0].count())", "df.apply(lambda x: sum(x!= 0), axis=0)", "df.apply(lambda x: sum(x!= 0), axis=1)", "df.apply(lambda x: x[x!= 0].count(), axis=0)", "df.apply(lambda x: x[x!= 0].count(), axis=1)", "df.count(axis=0, numeric_only=True)", "df.sum(axis=0)", "df.count(axis=0, numeric_only=False)", "df.sum(axis=0)", "df.apply(lambda x: sum(x!= 0), axis=0)"], "references": "df.astype(bool).sum(axis=1)"}
{"predictions": ["datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "string_date = datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "string_date = datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "date = datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "string_date = datetime.strptime(string_date, \"%Y-%m-%d %H:%M:%S.%f\")", "datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "date = datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strptime(string_date, \"%Y-%m-%d %H:%M:%S.%f\")"], "references": "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')"}
{"predictions": ["text = text.lower()", "text = text.lower()", "text = re.sub(r'[^\\w\\s]', '', text)", "text = text.lower()", "text = re.sub(r'\\W+', '', text)", "text = re.sub(r'\\W+','', text)", "text = text.lower()", "text = text.lower()", "text = text.lower()", "text = text.lower()"], "references": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"}
{"predictions": ["text = re.sub(r'[^a-zA-Z ]+', '', text)", "text = re.sub(r'[^a-zA-Z ]', '', text)", "text = re.sub('[^a-zA-Z0-9 ]', '', text)", "text = re.sub('[^a-zA-Z ]+', '', text).lower()", "text = re.sub('[^a-zA-Z0-9 ]+', '', text)", "text = re.sub('[^a-zA-Z0-9 ]+', '', text).lower()", "text = re.sub('[^a-zA-Z ]+', '', text)", "text = re.sub(r'[^\\w\\s]', '', text)", "text = re.sub('[^a-zA-Z ]', '', text)", "text = re.sub('[^a-zA-Z ]+', '', text)"], "references": "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"}
{"predictions": ["s = '2.MATCHES $$TEXT$$ STRING'", "s = '2.MATCHES $$TEXT$$ STRING'", "s = '2.MATCHES $$TEXT$$ STRING'", "text = '2.MATCHES $$TEXT$$ STRING'", "s = '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')", "\"2.MATCHES $$TEXT$$ STRING\".split(\"$$TEXT$$\")", "s = '2.MATCHES $$TEXT$$ STRING'", "s = '2.MATCHES $$TEXT$$ STRING'", "s = '2.MATCHES $$TEXT$$ STRING'", "2.MATCHES $$TEXT$$ STRING"], "references": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]"}
{"predictions": ["soup.name", "soup.find('name')", "print(soup.name)", "soup.find(\"name\")", "soup.name", "soup.name", "soup.find(name='name')", "soup.find(name=\"name\")", "soup.name", "soup.find_all('name')"], "references": "soup.find('name').string"}
{"predictions": ["with open(filepath, 'r') as f:", "with open(filepath, 'r') as file:", "with open(filepath) as f:", "def get_characters_count(filepath):", "with open(filepath) as f:", "with open(filepath) as f:", "with open(filepath) as f:", "with open(filepath) as f:", "def get_char_count(filepath):", "with open(filepath) as fp:"], "references": "os.stat(filepath).st_size"}
{"predictions": ["l = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a", "l.count('a')", "l.count(\"a\")", "count = 0", "count = 0", "l = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]", "l = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b", "l = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b", "l = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]", "l = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]"], "references": "l.count('a')"}
{"predictions": ["counts = {}", "counts = {}", "counts = {}", "count = 0", "def count_occurrences(l):", "def count_occurrences(l):", "count = 0", "def count_occurrences(l):", "def count_occurrences(l):", "def count_occurrences(l):"], "references": "Counter(l)"}
{"predictions": ["counts = {}", "counts = {}", "counts = {}", "count = 0", "def count_occurrences(l):", "def count_occurrences(l):", "count = 0", "def count_occurrences(l):", "def count_occurrences(l):", "def count_occurrences(l):"], "references": "[[x, l.count(x)] for x in set(l)]"}
{"predictions": ["counts = {}", "counts = {}", "counts = {}", "count = 0", "def count_occurrences(l):", "def count_occurrences(l):", "count = 0", "def count_occurrences(l):", "def count_occurrences(l):", "def count_occurrences(l):"], "references": "dict(((x, l.count(x)) for x in set(l)))"}
{"predictions": ["count = 0", "count = 0", "count = 0", "count = 0", "count = 0", "count = 0", "l.count('b')", "count = 0", "count = 0", "count = 0"], "references": "l.count('b')"}
{"predictions": ["shutil.copyfile('srcfile', 'dstdir/srcfile')", "shutil.copy(srcfile, dstdir)", "import shutil", "import shutil", "import shutil", "shutil.copy(srcfile, dstdir)", "shutil.copyfile('srcfile', 'dstdir/srcfile.txt')", "shutil.copyfile(srcfile, dstdir + '/' + srcfile)", "shutil.copy('srcfile', 'dstdir')", "shutil.copyfile('srcfile', 'dstdir')"], "references": "shutil.copy(srcfile, dstdir)"}
{"predictions": ["df['c'] = df[['b', 'a']].apply(lambda x: x[0] + x[1], axis=1)", "df['c'] = df['b'] + df['a']", "df['c'] = df.apply(lambda x: x['b'] + x['a'], axis=1)", "df['c'] = df.apply(lambda x: x['b'] + x['a'], axis=1)", "df['c'] = df.apply(lambda row: row['b'] + row['a'], axis=1)", "df.loc[:, 'c'] = df.loc[:, 'b'] + df.loc[:, 'a']", "df['c'] = df['b'].astype(str) + df['a'].astype(str)", "df['c'] = df.apply(lambda x: x['b'] + x['a'], axis=1)", "df['c'] = df.apply(lambda x: x['b'] + x['a'], axis=1)", "df['c'] = df[['b', 'a']].apply(lambda x: x.sum(), axis=1)"], "references": "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"}
{"predictions": ["list(t)", "t = list(t)", "t = list(t)", "list(t)", "list(t)", "t = (1,2,3,4,5)", "t = (1, 2, 3, 4, 5)", "t = list(t)", "t = list(t)", "t = list(t)"], "references": "list(t)"}
{"predictions": ["t = tuple(t)", "tuple(t)", "t = tuple(t)", "tuple(t)", "t = tuple(t)", "t = list(t)", "tuple(users)", "t = tuple(t)", "t=tuple(t)", "t = list(t)"], "references": "tuple(t)"}
{"predictions": ["level1 = list(level1)", "list(level1)", "level1 = list(level1)", "list(level1)", "level1_list = list(level1)", "list(level1)", "[1, 2, 3]", "list(level1)", "print(list(level1))", "level1 = list(level1)"], "references": "level1 = map(list, level1)"}
{"predictions": ["with open(logFile, 'w') as f:", "with open('logFile', 'w') as f:", "logFile.write(pprint.pformat(dataobject))", "dataobject.pprint(logFile)", "with open('logFile', 'w') as logFile:", "with open(logFile, 'w') as logFile:", "with open(logFile, 'w') as file:", "dataobject.pprint(file=logFile)", "pprint.pprint(dataobject, logFile)", "with open(logFile, 'w') as f:"], "references": "pprint.pprint(dataobject, logFile)"}
{"predictions": ["for i in range(len(users)):", "for i in range(len(users)):", "users.index(filter(lambda x: x['BoolCol'] == True, users))", "users.index(filter(lambda x: x['BoolCol'], users))", "users.sort(key=lambda x: order.index(x['BoolCol']))", "users.sort(key=lambda x: x['BoolCol'])", "print(users.index(row) for row in users if row['BoolCol'])", "print(users.index(row) for row in users if row['BoolCol'] == True)", "users.index(filter(lambda x: x['BoolCol'] == True, users))", "for i in range(len(users)):"], "references": "df.loc[df['BoolCol']]"}
{"predictions": ["df[df['BoolCol'] == True].index.tolist()", "df[df.BoolCol == True].index.tolist()", "df.loc[df['BoolCol'] == True].index.tolist()", "df.loc[df['BoolCol'] == True].index", "df.loc[df['BoolCol'] == True].index.values", "indexes = df[df['BoolCol'] == True].index.tolist()", "df[df['BoolCol'] == True].index", "df[df['BoolCol'] == True].index.values", "df[df.BoolCol == True].index", "df.loc[df.BoolCol == True].index"], "references": "df.iloc[np.flatnonzero(df['BoolCol'])]"}
{"predictions": ["df.loc[df['BoolCol'] == True].index.tolist()", "indexes = df[df['BoolCol'] == True].index.tolist()", "indexes = df[df.BoolCol == True].index.tolist()", "df.loc[df['BoolCol'] == True].index", "indexes = df[df['BoolCol'] == True].index.values.tolist()", "df.loc[df['BoolCol'] == True].index.tolist()", "indexes = df[df['BoolCol'] == True].index.tolist()", "indexes = df[df.BoolCol == True].index.tolist()", "df.loc[df['BoolCol'] == True].index.tolist()", "indexes = df[df['BoolCol'] == True].index.tolist()"], "references": "df[df['BoolCol'] == True].index.tolist()"}
{"predictions": ["df.loc[df['BoolCol'] == True].index", "df.loc[df['BoolCol'] == True]", "df[df['BoolCol'] == True].index", "df.index[df['BoolCol'] == True]", "df.loc[df.BoolCol == True].index", "df[df['BoolCol'] == True].index.tolist()", "df[df['BoolCol'] == True].index.values", "df.loc[df['BoolCol'] == True].index.values", "df[df['BoolCol']==True].index", "df[df.BoolCol == True].index"], "references": "df[df['BoolCol']].index.tolist()"}
{"predictions": ["os.chdir(owd)", "os.chdir(os.path.dirname(os.path.realpath(__file__)))", "os.chdir(os.path.dirname(os.path.abspath(__file__)))", "os.chdir(os.path.join(os.getcwd(), 'owd'))", "os.chdir(owd)", "os.chdir(os.path.dirname(os.path.abspath(__file__)))", "os.chdir(os.path.dirname(os.path.realpath(__file__)))", "os.chdir(os.path.dirname(os.path.realpath(__file__)))", "os.chdir(os.path.dirname(os.path.abspath(__file__)))", "os.chdir(os.path.dirname(os.path.abspath(__file__)))"], "references": "os.chdir(owd)"}
{"predictions": ["soup.find('div', {'id':'main-content'}).decompose()", "soup.find(\"div\", {\"id\": \"main-content\"}).decompose()", "soup.find('div', id='main-content').decompose()", "from bs4 import BeautifulSoup", "from bs4 import BeautifulSoup", "soup.find('div', {'id':'main-content'})", "soup.find('div', id='main-content').decompose()", "soup.find('div', id='main-content').decompose()", "soup.find('div', id='main-content').decompose()", "soup.find('div', id='main-content').decompose()"], "references": "soup.find('div', id='main-content').decompose()"}
{"predictions": ["df = df[df['ids'].str.contains('ball')]", "df.loc[df['ids'].str.contains('ball')]", "df = df[df.ids.str.contains('ball')]", "df = df.loc[df['ids'].str.contains('ball')]", "filtered_df = df[df['ids'].str.contains('ball')]", "df.loc[df.ids.str.contains('ball')]", "df = df[df['ids'].str.contains('ball')]", "df.loc[df['ids'].str.contains('ball', na=False)]", "df[df['ids'].str.contains('ball')]", "df[df['ids'].str.contains('ball')]"], "references": "df[df['ids'].str.contains('ball')]"}
{"predictions": ["df.set_index('id', inplace=True)", "df.reset_index(inplace=True)", "df.reset_index(inplace=True, drop=True)", "df.set_index('id', inplace=True)", "df.reset_index(inplace=True)", "df = df.set_index('id')", "df.columns = df.index", "df.reset_index(inplace=True)", "df.set_index('id', inplace=True)", "df.set_index('id', inplace=True)"], "references": "df.reset_index(level=['tick', 'obs'])"}
{"predictions": ["[(a[i], b[i]) for i in range(len(a))]", "for i in range(len(a)):", "a = [1, 2, 3]", "for a, b in zip(a, b):", "a = ['a', 'b', 'c']", "a = ['a', 'b', 'c', 'd', 'e']", "a = ['a', 'b', 'c']", "for i in range(len(a)):", "a = ['a', 'b', 'c', 'd', 'e']", "a = ['a', 'b', 'c', 'd']"], "references": "np.array([zip(x, y) for x, y in zip(a, b)])"}
{"predictions": ["for i in range(len(a)):", "for i, j in zip(a, b):", "for a, b in zip(a, b):", "list(zip(a, b))", "list(zip(a,b))", "zip(a, b)", "zip(a,b)", "pairs = zip(a, b)", "zipped = zip(a, b)", "for i in range(len(a)):"], "references": "np.array(list(zip(a.ravel(),b.ravel())), dtype=('i4,i4')).reshape(a.shape)"}
{"predictions": ["\"abcd}def}\".rfind(\"}\")", "s = \"abcd}def\"", "s = \"abcd}def\"", "a = \"abcd}def\"", "s = \"abcd}def\"", "string = \"abcd}def\"", "s = \"abcd}def\"", "s = 'abcd}def'", "s = \"abcd}def\"", "a = \"abcd}def\""], "references": "'abcd}def}'.rfind('}')"}
{"predictions": ["mystring = mystring.replace(' ', '_')", "mystring = mystring.replace(\" \", \"_\")", "mystring.replace(' ', '_')", "mystring = mystring.replace(' ', '_')", "mystring = mystring.replace(' ','_')", "mystring.replace(' ','_')", "mystring = mystring.replace(\" \", \"_\")", "mystring = mystring.replace(' ', '_')", "my_string = mystring.replace(' ', '_')", "mystring = mystring.replace(\" \",\"_\")"], "references": "mystring.replace(' ', '_')"}
{"predictions": ["np.random.shuffle(r)", "r = np.random.permutation(r)", "numpy.random.shuffle(r)", "np.random.shuffle(r)", "np.random.shuffle(r)", "import numpy as np", "r = np.random.shuffle(r)", "r = np.random.permutation(r.T)", "np.random.shuffle(r)", "np.random.shuffle(r)"], "references": "np.random.shuffle(np.transpose(r))"}
{"predictions": ["import os", "import os", "import os", "import os", "from os import listdir", "print(len(os.listdir()))", "import os", "import os", "import os", "import os"], "references": "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}
{"predictions": ["result = cursor.fetchone()", "cursor.fetchone()", "result = cursor.fetchall()", "user = cursor.fetchone()", "results = cursor.fetchone()", "cursor.fetchone()", "result = cursor.fetchall()[0]", "cursor.fetchall()", "cursor.fetchone()", "cursor.fetchone()"], "references": "cursor.fetchone()[0]"}
{"predictions": ["list.sort(key=lambda x: (x[0], x[-1]))", "list.sort(key=lambda x: (x[0], -x[-1]))", "list.sort(key=lambda x: (x[0], -x[1]))", "list.sort(list, key=lambda x: (x[0], x[-1]))", "sorted(list, key=lambda x: (x[0], x[-1]))", "list.sort(key=lambda x: (x[0], x[-1]))", "list.sort(key=lambda x: (x[1], x[0]))", "list.sort(key=lambda x: (x[0], x[-1]))", "list.sort(key=lambda x: (x[0], x[-1]))", "list.sort(key=lambda x: (x[0], -x[1]))"], "references": "sorted(list, key=lambda x: (x[0], -x[1]))"}
{"predictions": ["df.sort_values(by=['System_num', 'Dis'], inplace=True)", "df.sort_values(by=['System_num', 'Dis'], inplace=True)", "df.sort_values(by=['System_num', 'Dis'], inplace=True)", "df.sort_values(by=['System_num', 'Dis'], inplace=True, ascending=False)", "df.sort_values(by=['System_num', 'Dis'])", "df.sort_values(by=['System_num','Dis'], inplace=True)", "df.sort_values(by=['System_num','Dis'], inplace=True)", "df.sort_values(by=['System_num','Dis'],inplace=True)", "df.sort_values(by=['System_num','Dis'],inplace=True)", "df.sort_values(by=['System_num','Dis'], inplace=True)"], "references": "df.sort_values(['System_num', 'Dis'])"}
{"predictions": ["with open('infile', 'r') as infile, open('outfile', 'w') as outfile:", "with open('infile') as infile, open('outfile', 'w') as outfile:", "with open('infile', 'r') as fin, open('outfile', 'w') as fout:", "with open(infile, 'r') as infile, open(outfile, 'w') as outfile:", "with open('infile') as infile, open('outfile','w') as outfile:", "with open('infile') as f:", "with open('infile', 'r') as f:", "with open('infile', 'r') as infile:", "with open('infile', 'r') as f, open('outfile', 'w') as g:", "with open('infile', 'r') as infile:"], "references": "open(outfile, 'w').write('#test firstline\\n' + open(infile).read())"}
{"predictions": ["return re.search(r'ba[rzd]', foobarrrr)", "return re.search(r'ba[rzd]', foobarrrr) is not None", "if re.search(r'ba[rzd]', foobarrrr):", "return re.search('ba[rzd]', foobarrrr)", "if re.search(r'ba[rzd]', 'foobarrrr'):", "return re.search('ba[rzd]', foobarrrr) is not None", "return re.search('ba[rzd]', 'foobarrrr')", "if re.search('ba[rzd]', 'foobarrrr'):", "if re.search('ba[rzd]', foobarrrr):", "return re.search(\"ba[rzd]\", foobarrrr)"], "references": "bool(re.search('ba[rzd]', 'foobarrrr'))"}
{"predictions": ["t = list(dict.fromkeys(t))", "t = list(set(t))", "t.sort(key=lambda x: x[0])", "t = sorted(set(t), key=t.index)", "t = list(set(t))", "t = list(set(t))", "t = list(dict.fromkeys(t))", "t.sort(key=lambda x: x[1])", "t = list(set(t))", "t = list(dict.fromkeys(t))"], "references": "list(set(t))"}
{"predictions": ["source_list = sorted(set(source_list), key=source_list.index)", "[x for x in source_list if source_list.count(x) == 1]", "source_list = list(dict.fromkeys(source_list))", "source_list = list(set(source_list))", "source_list = list(dict.fromkeys(source_list))", "source_list = list(dict.fromkeys(source_list))", "[x for x in source_list if x not in source_list[1:]]", "source_list = list(set(source_list))", "source_list = list(dict.fromkeys(source_list))", "source_list = list(dict.fromkeys(source_list))"], "references": "list(set(source_list))"}
{"predictions": ["[x for x in abracadabra if abracadabra.count(x) == 1]", "abracadabra = set(abracadabra)", "abracadabra = sorted(set(abracadabra), key=abracadabra.index)", "abracadabra = list(set(abracadabra))", "[x for x in abracadabra if x not in abracadabra[1:]]", "abracadabra = list(dict.fromkeys(abracadabra))", "[x for x in abracadabra if abracadabra.count(x) ", "abracadabra = list(dict.fromkeys(abracadabra))", "abracadabra = list(set(abracadabra))", "[x for x in abracadabra if abracadabra.count(x) == 1]"], "references": "list(OrderedDict.fromkeys('abracadabra'))"}
{"predictions": ["a = list(map(int, a))", "a = list(a)", "a = list(a)", "a = [1,2,3,4,5]", "a = a.tolist()", "a = [1, 2, 3, 4, 5]", "a = list(a)", "a = list(a)", "a = list(a)", "a = list(a)"], "references": "numpy.array(a).reshape(-1).tolist()"}
{"predictions": ["a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "list(a[0])", "list(a[0])", "a[0].tolist()", "a[0].tolist()", "a[0].tolist()", "a = np.array([[1,2,3],[4,5,6],[7,8,9]])", "a = np.array([[1, 2, 3], [4, 5, 6]])", "a = np.array([[1,2,3],[4,5,6],[7,8,9]])", "a = np.array([[1, 2, 3], [4, 5, 6]])"], "references": "numpy.array(a)[0].tolist()"}
{"predictions": ["soup.find('td', text='Address:').find_next_sibling('td').text", "soup.find('td', text='Address:').find_next_sibling('td').get_text()", "soup.td.next_sibling.get_text()", "soup.find('td', text='Address:').find_next_sibling('td').text", "soup.td.next_sibling.text", "soup.find('td', text='Address:').find_next_sibling('td').get_text()", "soup.find('td', text='Address:').find_next_sibling().get_text()", "soup.find('td', text='Address:').find_next_sibling('td')", "soup.find('td', text='Address:').find_next_sibling('td').string", "soup.td.next_sibling.get_text()"], "references": "soup.find(text='Address:').findNext('td').contents[0]"}
{"predictions": ["d.sort(key=lambda x: x.keys())", "d.sort(key=lambda x: x.keys())", "sorted(d.items(), key=lambda x: x[0])", "d.sort(key=lambda x: list(x.keys()))", "sorted(d.items(), key=lambda kv: kv[0])", "d.sort(key=lambda x: sorted(x.keys()))", "d.sort(key=lambda x: x['key'])", "sorted(d, key=lambda x: x.keys())", "sorted(d.items(), key=lambda x: x[0])", "d.sort(key=lambda x: x.keys())"], "references": "sorted(d.items())"}
{"predictions": ["encoded_data = base64.b64encode(data.encode('utf-8')).decode('utf-8')", "encoded_data = base64.b64encode(data.encode('utf-8'))", "encoded_data = data.encode('utf-8')", "base64.b64encode(data.encode('utf-8')).decode('utf-8')", "encoded_data = data.encode('utf-8')", "encoded_data = base64.b64encode(data)", "encoded_data = data.encode('utf-8')", "base64.b64encode(data.encode('utf-8')).decode('utf-8')", "encoded_data = base64.b64encode(data.encode('utf-8'))", "base64.b64encode(data.encode('utf-8'))"], "references": "base64.b64encode(b'data to be encoded')"}
{"predictions": ["encoded = data.encode('ascii')", "data = data.encode('ascii')", "print(data.encode('ascii'))", "data.encode('ascii')", "encoded_data = data.encode('ascii')", "data_to_be_encoded.encode('ascii')", "data_encoded = data.encode('ascii')", "data.encode(encoding='ascii')", "data.encode('ascii')", "data.encode('ascii')"], "references": "'data to be encoded'.encode('ascii')"}
{"predictions": ["my_object.my_str", "print(my_object.my_str)", "my_str = my_object.my_str", "my_str = my_object.my_attr", "getattr(my_object,'my_str')", "my_object.my_str", "my_object.my_str", "my_str = my_object.my_attribute", "my_object['my_str']", "my_object.my_str"], "references": "getattr(my_object, my_str)"}
{"predictions": ["total = 0", "total = 0", "list_of_pairs = [(1, 2), (3, 4), (5, 6)]", "sum([x[0] for x in list_of_pairs])", "sum([x[0] for x in list_of_pairs])", "sum(x[0] for x in list_of_pairs)", "sum(pair[0] for pair in list_of_pairs)", "sum([x[0] for x in list_of_pairs])", "sum(t[0] for t in list_of_pairs)", "sum([x[0] for x in list_of_pairs])"], "references": "sum([pair[0] for pair in list_of_pairs])"}
{"predictions": ["[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "for i in range(len(A)):", "for i in range(len(A)):", "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "for i in range(len(A)):", "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1", "for i in range(len(A)):", "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3"], "references": "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"}
{"predictions": ["np.mean(a, axis=1)", "np.mean(a, axis=0)", "a = np.array([[1, 2], [3, 4]])", "import numpy as np", "import numpy as np", "mean = a.mean(axis=0)", "import numpy as np", "mean = np.mean(a, axis=1)", "a.mean(axis=0)", "mean = np.mean(a, axis=0)"], "references": "np.mean(a, axis=1)"}
{"predictions": ["a[(a[:,0]==0) & (a[:,1]==1)]", "a = np.where(a[:,0] == 0, a[:,1], a[:,0])", "a[a[:, 0] == 0, 1]", "a[a[:,0]==0,1]", "np.where(a[:,0] == 0, a[:,1], a[:,0])", "np.where(a[:,0]==0, a[:,1], a[:,0])", "a[(a[:,0]==0) & (a[:,1]==1)]", "a = np.where(a[:,0] == 0, a[:,1], a[:,2])", "a = np.array([[0, 1], [1, 0], [0, 1]])", "np.where(a[:,0] == 0, a[:,1], a[:,0])"], "references": "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"}
{"predictions": ["df.groupby(['col1', 'col2'])['col3'].nunique()", "df.groupby(['col1', 'col2']).col3.nunique()", "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()", "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index().sort_values('col3', ascending=False)", "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index().sort_values(by='col3', ascending=False)", "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index().sort_values(by=['col1', 'col2'])", "df.groupby(['col1', 'col2']).col3.nunique()", "df.groupby(['col1', 'col2']).col3.nunique()", "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index().sort_values(by=['col3'], ascending=False)", "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index().sort_values(by=['col3'])"], "references": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}
{"predictions": ["df = pd.DataFrame({'email': sf['email'], 'list': sf['list']})", "df = pd.DataFrame({'email': sf.email, 'list': sf.list})", "df = pd.DataFrame({'email': sf.index, 'list': sf.values})", "df = pd.DataFrame({'email':sf['email'], 'list':sf['list']})", "df = pd.DataFrame(sf, columns=['email', 'list'])", "df = pd.DataFrame({'email': sf.index, 'list': sf})", "df = pd.DataFrame({'email':sf.index, 'list':sf.values})", "df = pd.DataFrame(sf, columns=['email', 'list'])", "df = pd.DataFrame(sf, columns=['email', 'list'])", "df = pd.DataFrame({'email': sf.email, 'list': sf.list})"], "references": "df = pd.DataFrame({'email': sf.index, 'list': sf.values})"}
{"predictions": ["print('\\t'.join(list))", "print(\"\\t\".join(list))", "print('\\t'.join(list))", "print('\\t'.join(map(str, list)))", "\"\\t\".join(list)", "for i in range(len(list)):", "print('\\t'.join(list))", "\"\\t\".join(list)", "\"\\t\".join(list)", "\"\\t\".join(list)"], "references": "'\\t'.join(map(str, list))"}
{"predictions": ["for i in range(len(l1)):", "for i in range(len(l1)):", "for i in range(len(l1)):", "for i in range(len(l1)):", "[l1[i] - l2[i] for i in range(len(l1)) if l1[i]!= l2[i]]", "for i in range(len(l1)):", "for i in range(len(l1)):", "[l1[i] - l2[i] for i in range(len(l1)) if l1[i] - l2[i] ", "for i in range(len(l1)):", "for i in range(len(l1)):"], "references": "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"}
{"predictions": ["soup.find_all('span', {'class':'starGryB sp'})", "soup.find_all('span', attrs={'class':'starGryB sp'})", "soup.findAll('span', {'class':'starGryB sp'})", "soup.find_all('span', class_='starGryB sp')", "soup.find_all('span', class_='starGryB sp')", "soup.find_all('span', class_='starGryB sp')", "soup.find_all(class_='starGryB sp')", "soup.find_all('span', class_='starGryB sp')", "soup.find_all('span', class_='starGryB sp')", "soup.find_all('span', {'class':'starGryB sp'})"], "references": "soup.find_all('span', {'class':'starGryB sp'})"}
{"predictions": ["df.to_sql('test', con=engine, schema='a_schema', if_exists='append', index=False)", "df.to_sql(name='test', con=engine, schema='a_schema', if_exists='append', index=False)", "df.to_sql('test', con=engine, schema='a_schema', if_exists='replace', index=False)", "df.to_sql('test', con=engine, schema='a_schema', if_exists='append', index=False)", "df.to_sql(name='test', con=engine, schema='a_schema', if_exists='append')", "df.to_sql('test', con=engine, schema='a_schema', index=False, if_exists='replace')", "df.to_sql('test', con=engine, schema='a_schema', if_exists='append', index=False)", "df.to_sql('test', con=engine, schema='a_schema', index=False, if_exists='append')", "df.to_sql('test', con=engine, schema='a_schema', if_exists='append', index=False)", "df.to_sql('test', con=engine, schema='a_schema', if_exists='append', index=False)"], "references": "df.to_sql('test', engine)"}
{"predictions": ["list5.sort(key=lambda x: x['degrees'])", "list5.sort(key=lambda x: x.degree)", "list5.sort(key=lambda x: x.degrees)", "list5.sort(key=lambda x: x.get('degrees'))", "list5.sort(key=lambda x: x['degree'])", "list5.sort(key=lambda x: x['degrees'])", "list5.sort(key=lambda x: x['degrees'])", "sorted(list5, key=lambda x: x['degrees'])", "list5.sort(key=lambda x: x[2])", "list5.sort(key=lambda x: x[1])"], "references": "sorted(list5, key = lambda x: (degrees(x), x))"}
{"predictions": ["l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u", "for i in l:", "l = [1,2,3,4,5]", "l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v", "l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']", "l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']", "l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']", "for i in l:", "l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']", "l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']"], "references": "(n for n in l)"}
{"predictions": ["obj.attr", "attr = obj.attr", "attr = getattr(obj, 'attr')", "def get_attr(obj, attr):", "users.sort(key=lambda x: x['attr'])", "print(obj.attr)", "def get_attr(obj, attr):", "def get_attr(obj, attr):", "getattr(obj, 'attr')", "obj.attr"], "references": "getattr(obj, attr)"}
{"predictions": ["df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('a', 'b'))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('A', 'a'))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('a', 'A'))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('.', ''))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.replace('a', '@'))", "df.iloc[:,1] = df.iloc[:,1].apply(lambda x: x.replace('a', 'b'))", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.upper())", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.upper())", "df.iloc[:, 1] = df.iloc[:, 1].apply(lambda x: x.upper())", "df.iloc[:,1] = df.iloc[:,1].apply(lambda x: x.upper())"], "references": "df['range'].replace(',', '-', inplace=True)"}
{"predictions": ["json.dumps(Decimal('3.9'))", "Decimal('3.9').to_eng_string()", "Decimal('3.9').to_json()", "'3.9'", "import json", "Decimal(3.9).to_json()", "Decimal('3.9')", "'3.9'", "json.dumps(3.9)", "json.dumps(3.9)"], "references": "json.dumps('3.9')"}
{"predictions": ["ip = re.findall(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", s)", "from html.parser import HTMLParser", "ip = re.findall(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", s)[0]", "ip = re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)", "ip = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", s).group()", "from html.parser import HTMLParser", "ip = re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', s)[0]", "ip = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", s).group(0)", "ip = re.search(r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\", s)", "from html.parser import HTMLParser"], "references": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}
{"predictions": ["df = df.loc[df.groupby('A')['A'].transform('count') ", "df[df.A.duplicated()]", "df = df[df['A'].value_counts() ", "df = df.loc[df.groupby('A')['A'].transform('count') ", "df = df.loc[df['A'].value_counts() ", "df = df.loc[df.groupby('A')['A'].transform('count') ", "df = df.loc[df['A'].value_counts() ", "df = df.loc[df.groupby('A')['A'].transform('count') ", "df = df.loc[df['A'].value_counts() ", "df = df.loc[df.groupby('A')['A'].transform('count') "], "references": "df.groupby('A').filter(lambda x: len(x) > 1)"}
{"predictions": ["plt.colorbar(mappable)", "fig, ax = plt.subplots()", "fig, ax = plt.subplots()", "fig, ax = plt.subplots()", "fig, ax = plt.subplots()", "fig, ax = plt.subplots()", "fig, ax = plt.subplots()", "fig, ax = plt.subplots()", "plt.colorbar(mappable=plt.imshow(mappable))", "fig, ax = plt.subplots()"], "references": "plt.colorbar(mappable=mappable, cax=ax3)"}
{"predictions": ["df['text'].value_counts()[:100].sort_values(ascending=False).head(100)", "df['text'].value_counts()[:100].sort_values(ascending=False)", "df['text'].value_counts()[:100].sort_values(ascending=False)", "df['text'].value_counts().head(100).plot(kind='bar')", "df['text'].value_counts()[:100].sort_values(ascending=False).head(100)", "df['text'].value_counts()[:100].sort_values(ascending=False).head()", "df['text'].value_counts()[:100].sort_values(ascending=False).head(100)", "df['text'].value_counts()[:100].sort_values(ascending=False)", "df['text'].value_counts()[:100].sort_values(ascending=False)", "df['text'].value_counts()[:100].sort_values(ascending=False)"], "references": "Counter(' '.join(df['text']).split()).most_common(100)"}
{"predictions": ["today = datetime.today().replace(tzinfo=timezone.utc)", "now = datetime.now(tz=timezone.utc)", "now = datetime.now(timezone.utc)", "today = datetime.now(timezone.utc)", "today = datetime.today().replace(tzinfo=pytz.UTC)", "now = datetime.utcnow()", "now = datetime.datetime.utcnow()", "today = datetime.utcnow()", "today = datetime.datetime.utcnow()", "now = datetime.datetime.utcnow()"], "references": "datetime.now(pytz.utc)"}
{"predictions": ["{", "{", "{", "{", "{", "{", "{", "{", "{", "{"], "references": "HttpResponse(data, content_type='application/json')"}
{"predictions": ["subprocess.Popen(['python', 'background-process.py', 'arguments'])", "subprocess.Popen(['python3', 'background-process.py', 'arguments'])", "from multiprocessing import Process", "subprocess.Popen(['python', 'background-process', 'arguments'])", "p = Process(target=background_process, args=('arguments',))", "subprocess.Popen(['python', 'background-process.py', 'arguments'])", "process = subprocess.Popen(['python', 'background-process.py', 'arguments'])", "subprocess.Popen(['python3', 'background-process', 'arguments'])", "subprocess.Popen(['python', 'background-process.py', 'arguments'])", "from multiprocessing import Process"], "references": "subprocess.Popen(['background-process', 'arguments'])"}
{"predictions": ["s.split()", "words = s.split()", "s.split(' ')", "words = s.split(' ')", "s.split(\" \")", "s = s.split()", "words = s.split(\" \")", "s.split()", "def split(s):", "print(s.split())"], "references": "re.split('(\\\\W+)', s)"}
{"predictions": ["import pandas as pd", "df.plot.bar(stacked=True)", "df.plot(kind='bar', stacked=True)", "df.plot(kind='bar',stacked=True)", "df.plot.bar(stacked=True)", "df.plot.bar(stacked=True)", "df.plot.bar(stacked=True)", "df.plot(kind='bar', stacked=True)", "df.plot(kind=\"bar\", stacked=True)", "df.plot(kind='bar', stacked=True)"], "references": "df.plot(kind='barh', stacked=True)"}
{"predictions": ["for i in range(len(myList)):", "[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]]", "for i in range(len(myList)):", "for i in range(len(myList)):", "for i in range(0, len(myList)):", "for i in range(len(myList)):", "for i in range(len(myList)):", "for i in range(len(myList)):", "for i in range(len(myList)):", "[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]]"], "references": "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"}
{"predictions": ["out = pd.DataFrame(zip(out_1, out_2), columns=['out-1', 'out-2'])", "out = pd.DataFrame(out, columns=['out-1', 'out-2'])", "out = pd.DataFrame.from_records(out, columns=['out-1', 'out-2'])", "out = pd.DataFrame(out, columns=['out-1', 'out-2'])", "df = pd.DataFrame(out, columns=['out-1', 'out-2'])", "out = pd.DataFrame({'out-1': out[0], 'out-2': out[1]})", "out = pd.DataFrame(zip(out_1, out_2), columns=['out-1', 'out-2'])", "out = pd.DataFrame(zip(out_1, out_2), columns=['out-1', 'out-2'])", "out = pd.DataFrame.from_records(out, columns=['out-1', 'out-2'])", "out = pd.DataFrame({'out-1': out[0], 'out-2': out[1]})"], "references": "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"}
{"predictions": ["ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(labels, rotation=45)", "for label in ax.get_xticklabels():", "labels = ax.get_xticklabels()", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "labels = ax.get_xticklabels()", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(ax.get_xticklabels(),rotation=45)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha=\"right\")"], "references": "ax.set_xticklabels(labels, rotation=45)"}
{"predictions": ["matches = re.findall(r'\\d+', s)", "matches = re.findall(r'[0-7]+', s)", "matches = re.findall(r'\\d{1,3}', s)", "matches = re.findall(r\"\\d+\", s)", "matches = re.findall(r'\\d{3}', s)", "import re", "match = re.findall(r'\\d+', s)", "re.findall(r'[0-7]+', s)", "import re", "import re"], "references": "re.findall(\"'\\\\\\\\[0-7]{1,3}'\", s)"}
{"predictions": ["len(yourdict.keys())", "print(len(yourdict))", "len(yourdict)", "print(len(yourdict.keys()))", "yourdict.__len__()", "number_of_keys = len(yourdict)", "len(yourdict)", "len(yourdict)", "len(yourdict.keys())", "yourdict.keys()"], "references": "len(list(yourdict.keys()))"}
{"predictions": ["count = len(yourdictfile.keys())", "print(len(yourdictfile.keys()))", "number_of_keys = len(yourdictfile.keys())", "len(yourdictfile)", "number_of_keys = len(yourdictfile)", "len(yourdictfile.keys())", "print(len(yourdictfile))", "count(yourdictfile.keys())", "print(len(yourdictfile.keys()))", "count = len(yourdictfile)"], "references": "len(set(open(yourdictfile).read().split()))"}
{"predictions": ["df.groupby('id').head(1)", "df.head(1)", "df.iloc[0]", "df.groupby('id').first()", "df.groupby('id').head()", "df.groupby('id').head(1)", "df.groupby('id')[0].first()", "df.loc[df.groupby('id').head(1).index]", "df.loc[df.groupby('id').head(1)]", "df.groupby('id')[0].first()"], "references": "df.groupby('id').first()"}
{"predictions": ["df = pd.DataFrame(users, columns=['id', 'first_name', 'last_name', 'email'])", "df = pd.DataFrame(users, columns=['id', 'first_name', 'last_name'])", "df = pd.DataFrame(users, columns=['id', 'first_name', 'last_name', 'email', 'phone_number'])", "df = pd.DataFrame(users, columns=['id', 'first_name', 'last_name', 'email', 'phone'])", "df = pd.DataFrame(users, columns=['first_name', 'last_name', 'id'])", "df = pd.DataFrame(users, columns=['id', 'first_name', 'last_name', 'email'])", "df = pd.DataFrame(users, columns=['id', 'first_name', 'last_name', 'email'])", "df = pd.DataFrame(users, columns=['id', 'first_name', 'last_name', 'email'])", "df = pd.DataFrame(users, columns=['first_name', 'last_name', 'email'])", "df = pd.DataFrame(users, columns=['id', 'first_name', 'last_name', 'email'])"], "references": "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"}
{"predictions": ["subprocess.call('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')", "subprocess.call('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', shell=True)", "subprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "subprocess.call(\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\")", "subprocess.call(\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\", shell=True)", "subprocess.call('\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"')", "subprocess.run(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "subprocess.Popen('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "subprocess.call(r'c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')"], "references": "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"}
{"predictions": ["q.reverse()", "q.sort(key=lambda x: x[1], reverse=True)", "from heapq import heappush, heappop", "from heapq import heappush, heappop", "from heapq import heappush, heappop", "from heapq import heappush, heappop, heapify", "from heapq import heappush, heappop, heapify", "from heapq import heappush, heappop", "from heapq import heappush, heappop", "q.sort(key=lambda x: x[1], reverse=True)"], "references": "for n in [1,3,4,2]: q.put((-n, n))"}
{"predictions": ["a = np.concatenate((a, b), axis=0)", "np.concatenate((a, b), axis=0)", "np.concatenate([a, b], axis=0)", "a = np.concatenate((a,b), axis=0)", "np.concatenate((a,b), axis=0)", "a = np.concatenate([a, b], axis=0)", "a = np.concatenate((a,b),axis=0)", "np.concatenate((a,b),axis=0)", "np.concatenate([a,b], axis=0)", "import numpy as np"], "references": "np.concatenate((a, b), axis=0)"}
{"predictions": ["a = np.concatenate((a, b), axis=1)", "np.concatenate((a, b), axis=1)", "np.concatenate([a, b], axis=1)", "a = np.array([1, 2, 3])", "np.concatenate((a,b), axis=1)", "a = np.concatenate([a, b], axis=1)", "a = np.concatenate((a,b), axis=1)", "np.concatenate((a,b),axis=1)", "np.concatenate([a,b], axis=1)", "import numpy as np"], "references": "np.concatenate((a, b), axis=1)"}
{"predictions": ["a = np.concatenate((a, b), axis=0)", "np.concatenate((a, b), axis=0)", "np.concatenate([a, b], axis=0)", "a = np.concatenate((a,b), axis=0)", "np.concatenate((a,b), axis=0)", "a = np.concatenate([a, b], axis=0)", "a = np.concatenate((a,b),axis=0)", "np.concatenate((a,b),axis=0)", "np.concatenate([a,b], axis=0)", "import numpy as np"], "references": "np.r_[(a[None, :], b[None, :])]"}
{"predictions": ["a = np.concatenate((a, b), axis=0)", "np.concatenate((a, b), axis=0)", "np.concatenate([a, b], axis=0)", "a = np.concatenate((a,b), axis=0)", "np.concatenate((a,b), axis=0)", "a = np.concatenate([a, b], axis=0)", "a = np.concatenate((a,b),axis=0)", "np.concatenate((a,b),axis=0)", "np.concatenate([a,b], axis=0)", "import numpy as np"], "references": "np.array((a, b))"}
{"predictions": ["return Response(status=status.HTTP_401_UNAUTHORIZED)", "return HttpResponse(status=401)", "return Response(status=status.HTTP_401_UNAUTHORIZED)", "return HttpResponse('Unauthorized', status=401)", "return Response(status=status.HTTP_401_UNAUTHORIZED)", "return HttpResponse('Unauthorized', status=401)", "return Response(status=status.HTTP_401_UNAUTHORIZED)", "return Response(status=status.HTTP_401_UNAUTHORIZED)", "return HttpResponse(\"Unauthorized\", status=401)", "return HttpResponse(\"Unauthorized\", status=401)"], "references": "HttpResponse('Unauthorized', status=401)"}
{"predictions": ["c2.sort(key=lambda x: x[::-1])", "c2.sort(key=lambda x: x[1], reverse=True)", "c2.sort(key=lambda x: x[0], reverse=True)", "c2.sort(key=lambda x: x[::-1])", "c2.sort(key=lambda x: x[::-1])", "c2.sort(reverse=True)", "c2.sort(key=lambda x: -x[0])", "c2.sort(key=lambda x: x[-1], reverse=True)", "c2.sort(key=lambda x: x[::-1])", "c2.sort(key=lambda x: x[1], reverse=True)"], "references": "c2.sort(key=lambda row: (row[2], row[1], row[0]))"}
{"predictions": ["c2.sort(key=lambda x: (x[2], x[1]))", "c2 = sorted(c2, key=lambda x: (x[2], x[1]))", "sorted(c2, key=lambda x: (x[2], x[1]))", "c2.sort(key=lambda x: (x[2], x[1]))", "c2.sort(key=lambda x: (x[2], x[1]))", "c2.sort(key=lambda x: (x[2],x[1]))", "c2.sort(key=lambda x: (x[1], x[2]))", "c2.sort(key=lambda x: (x[0], x[1]))", "c2.sort(key=lambda x: (x[2], x[1]))", "sorted(c2, key=lambda x: (x[2], x[1]))"], "references": "c2.sort(key=lambda row: (row[2], row[1]))"}
{"predictions": ["df.loc[df['name'] == 'bob']", "df.loc[df['name'] == 'Bob']", "df.index(df['name'] == 'bob')", "df.index[df['name'] == 'bob']", "df[df['name'] == 'bob'].index.values[0]", "df.loc[df['name'] == 'bob']", "df.loc[df['name'] == 'bob']", "df.loc[df.name == 'bob']", "df.loc[df['name'] == 'bob', 'age']", "df[df['name'] == 'bob'].index.tolist()"], "references": "df.index.get_loc('bob')"}
{"predictions": ["my_list = []", "my_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't',", "my_list = []", "my_list = []", "my_list = []", "my_list = []", "my_list = []", "my_list = []", "my_list = []", "my_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']"], "references": "my_list = []"}
{"predictions": ["bytes.fromhex(hex_str)", "hex_bytes = bytes.fromhex(hex_str)", "bytearray.fromhex(hex_str)", "b = bytes.fromhex(hex_str)", "binascii.unhexlify(hex_str)", "bytes.fromhex(hex_str)", "hex_str.encode('utf-8')", "bytes.fromhex(hex_str)", "bytes.fromhex(hex_str)", "bytes.fromhex(hex_str)"], "references": "bytes.fromhex(hex_str.replace('\\\\x', ''))"}
{"predictions": ["[[1, 4], [2, 5], [3, 6]]", "[[1, 4],", "[[1, 4],", "[[1, 2, 3], [4, 5, 6]]", "matrix = [[1, 4], [2, 5], [3, 6]]", "[[1, 4], [2, 5], [3, 6]]", "matrix = [[1, 2, 3],", "[[1, 2, 3],", "matrix = [[1, 2, 3], [4, 5, 6]]", "[[1,4],[2,5],[3,6]]"], "references": "np.column_stack(([1, 2, 3], [4, 5, 6]))"}
{"predictions": ["g = (x for x in range(10))", "g = (x for x in range(10) if x % 2 == 0)", "g[4]", "g = (i for i in range(10) if i % 2 == 0)", "print(next(g))", "g.__next__()", "print(g.__next__())", "g = (x for x in range(10) if x % 2 == 1)", "g = (x for x in range(10) if x ", "g.__next__()"], "references": "next(itertools.islice(g, 5, 5 + 1))"}
{"predictions": ["return '{} {}'.format(word, word)", "return f\"{word}\"", "return word.upper()", "return f'{word}'", "return '{} {}'.format(word[0], word[1])", "return '{} {}'.format(word, number)", "return str(word)", "return f'{word}!'", "return f'{word}'", "return f\"{word}\""], "references": "'\"{}\"'.format(word)"}
{"predictions": ["with open(filename) as f:", "with open('filename', 'r') as f:", "with open(filename, 'r') as f:", "with open('filename') as f:", "with open('filename', 'r') as file:", "with open(filename) as file:", "with open(filename, 'r') as file:", "with open(filename) as f:", "with open('filename') as file:", "with open('filename') as f:"], "references": "data = [line.strip() for line in open(filename, 'r')]"}
{"predictions": ["it_is_icy = it_is_icy.replace('i', '')", "it_is_icy = it_is_icy.replace('i','')", "it_is_icy = it_is_icy.replace(\"i\", \"\")", "s = 'it is icy'", "it_is_icy = it_is_icy.replace('i', '')", "it_is_icy = 'it is icy'", "string = 'it is icy'", "it_is_icy = it_is_icy.replace('i','',1)", "it_is_icy = 'it is icy'.replace('i', '')", "it_is_icy = it_is_icy.replace('i','')"], "references": "\"\"\"\"\"\".join([char for char in 'it is icy' if char!= 'i'])"}
{"predictions": ["it_is_icy = it_is_icy.replace('i', '')", "it_is_icy = it_is_icy.replace('i','')", "s = 'it is icy'", "it_is_icy = it_is_icy.replace(\"i\", \"\")", "it_is_icy = it_is_icy.replace('i', '')", "it_is_icy = 'it is icy'", "it_is_icy = it_is_icy.replace('i','',1)", "it_is_icy = \"it is icy\"", "s = 'it is icy'", "s = 'it is icy'"], "references": "re.sub('i', '', 'it is icy')"}
{"predictions": ["it_is_icy = it_is_icy.replace(\"i\", \"\")", "it_is_icy = it_is_icy.replace('i', '')", "string = \"it is icy\"", "s = \"it is icy\"", "it_is_icy = \"it is icy\"", "it_is_icy = it_is_icy.replace('i','')", "s = 'it is icy'", "it_is_icy = it_is_icy.replace(\"i\",\"\")", "string = 'it is icy'", "it_is_icy = \"it is icy\""], "references": "\"\"\"it is icy\"\"\".replace('i', '')"}
{"predictions": ["nums = list(map(int, intstringlist))", "intstringlist = list(map(int, intstringlist))", "nums = [int(x) for x in intstringlist]", "nums = [int(i) for i in intstringlist]", "intstringlist = map(int, intstringlist)", "intstringlist = [int(i) for i in intstringlist]", "nums = [int(s) for s in intstringlist]", "nums = []", "nums = list(map(int, intstringlist))", "intstringlist = list(map(int, intstringlist))"], "references": "nums = [int(x) for x in intstringlist]"}
{"predictions": ["for file in os.listdir('/mydir'):", "files = glob.glob('/mydir/*.txt')", "for file in os.listdir('mydir'):", "for file in files:", "for filename in os.listdir('mydir'):", "for filename in os.listdir('/mydir'):", "import os", "import glob", "for file in files:", "for file in os.listdir('/mydir'):"], "references": "\n\tos.chdir('/mydir')\n\tfiles = [] \n\tfor file in glob.glob('*.txt'):\n\t\tfiles.append(file)\n"}
{"predictions": ["for file in os.listdir(\"/mydir\"):", "for filename in os.listdir(\"/mydir\"):", "for filename in os.listdir(\"mydir\"):", "for file in os.listdir(\"mydir\"):", "for file in os.listdir('/mydir'):", "for filename in os.listdir('/mydir'):", "files = glob.glob(\"/mydir/*.txt\")", "for filename in os.listdir('mydir'):", "import os", "import os"], "references": "[file for file in os.listdir('/mydir') if file.endswith('.txt')]"}
{"predictions": ["for file in os.listdir(\"/mydir\"):", "for filename in os.listdir(\"/mydir\"):", "for filename in os.listdir(\"mydir\"):", "for file in os.listdir(\"mydir\"):", "for file in os.listdir('/mydir'):", "for filename in os.listdir('/mydir'):", "files = glob.glob(\"/mydir/*.txt\")", "for filename in os.listdir('mydir'):", "import os", "import os"], "references": "[file for (root, dirs, files) in os.walk('/mydir') for file in files if file.endswith('.txt')]"}
{"predictions": ["pd.date_range('20130226', '20130302').strftime('%Y%m%d')", "import pandas as pd", "pd.date_range('20130226', '20130302').strftime('%Y%m%d').tolist()", "import pandas as pd", "import pandas as pd", "import pandas as pd", "import pandas as pd", "pd.date_range(start='20130226', end='20130302', freq='D')", "import pandas as pd", "import pandas as pd"], "references": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]"}
{"predictions": ["request_body = json.loads(request_body)", "body = json.loads(request_body)", "data = json.loads(request_body)", "request_body_dict = json.loads(request_body)", "import json", "request_body = json.loads(request.body)", "json.loads(request_body)", "request_body = json.loads(request_body)", "request_dict = json.loads(request_body)", "request_body = json.loads(request_body)"], "references": "json.loads(request_body)"}
{"predictions": ["lst = list(filter(lambda x: isinstance(x, int), lst))", "lst = filter(lambda x: isinstance(x, int), lst)", "lst = [x for x in lst if isinstance(x, int)]", "lst = list(filter(lambda x: int(x), lst))", "list(filter(lambda x: isinstance(x, int), lst))", "lst = list(filter(lambda x: x.isdigit(), lst))", "lst = list(filter(lambda x: isinstance(x,int), lst))", "lst = list(filter(lambda x: isinstance(x, int), lst))", "lst = filter(lambda x: isinstance(x, int), lst)", "lst = filter(lambda x: isinstance(x, int), lst)"], "references": "[element for element in lst if isinstance(element, int)]"}
{"predictions": ["list_of_dicts.sort(key=lambda x: x['name'])", "list_of_dicts.sort(key=lambda x: x['name'])", "list_of_dicts.sort(key=lambda x: x['name'])", "list_of_dicts.sort(key=lambda x: x['name'])", "list_of_dicts = sorted(list_of_dicts, key=lambda x: x['name'])", "list_of_dicts.sort(key=lambda x: x['name'])", "list_of_dicts.sort(key=lambda x: x['name'])", "sorted(list_of_dicts, key=lambda x: x['name'])", "list_of_dicts.sort(key=lambda x: x['name'])", "list_of_dicts.sort(key=lambda x: x['name'])"], "references": "list_of_dicts.sort(key=operator.itemgetter('name'))"}
{"predictions": ["list_of_dicts.sort(key=lambda x: x['age'])", "list_of_dicts.sort(key=lambda x: x['age'])", "list_of_dicts.sort(key=lambda x: x['age'])", "list_of_dicts.sort(key=lambda x: x['age'])", "list_of_dicts = sorted(list_of_dicts, key=lambda x: x['age'])", "list_of_dicts.sort(key=lambda x: x['age'])", "list_of_dicts.sort(key=lambda x: x['age'])", "list_of_dicts.sort(key=lambda x: x['age'])", "sorted(list_of_dicts, key=lambda x: x['age'])", "list_of_dicts.sort(key=lambda x: x['age'])"], "references": "list_of_dicts.sort(key=operator.itemgetter('age'))"}
{"predictions": ["df.groupby('prots')['scores'].sum().sort_values(ascending=False)", "df.sort_values(by='scores', ascending=False, inplace=True, by='prots')", "df.sort_values('scores', inplace=True, ascending=False)", "df.sort_values(by='scores', inplace=True, ascending=False)", "df.sort_values(by='scores', ascending=False, inplace=True)", "df.sort_values(by=['scores'], inplace=True, ascending=False)", "df.groupby('prots')['scores'].sum().sort_values(ascending=False)", "df.groupby('prots')['scores'].sum().sort_values(ascending=False)", "df.groupby('prots')['scores'].sum().sort_values(ascending=False).reset_index()", "df.sort_values(by='scores',ascending=False,inplace=True)"], "references": "df.groupby('prots').sum().sort_values('scores', ascending=False)"}
{"predictions": ["list.sort(key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda x: (x['points'],x['time']))", "list.sort(key=lambda x: (x.get('points'), x.get('time')))", "list.sort(key=lambda x: (x[\"points\"], x[\"time\"]))", "sorted(list, key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda x: (x['points'], x['time']))", "users.sort(key=lambda x: (x['points'], x['time']))", "list.sort(key = lambda x: (x['points'], x['time']))"], "references": "list.sort(key=lambda item: (item['points'], item['time']))"}
{"predictions": ["def int_to_unassigned(number):", "def unassigned_integer(number):", "number = 0", "number = number - 1", "number = int(input())", "def unassigned_integer(number):", "number = int(number)", "int(number)", "number = int(input())", "def unassigned_integer(number):"], "references": "struct.unpack('H', struct.pack('h', number))"}
{"predictions": ["df.to_csv(filename, index=False)", "df.to_csv('filename', index=False)", "df.to_csv(filename, index=False)", "df.to_csv(filename, index=False)", "df.to_csv(filename)", "df.to_csv(filename, index=False)", "df.to_csv(filename,index=False)", "df.to_csv('filename.csv', index=False)", "df.to_csv(filename)", "df.to_csv(filename, index = False)"], "references": "df.to_csv(filename, index=False)"}
{"predictions": ["json_data = urllib.parse.unquote(unescaped)", "unescaped = urllib.parse.unquote(unescaped)", "unescaped = unquote(unescaped)", "unescaped = urllib.unquote(unescaped)", "json_data = urllib.parse.unquote_plus(unescaped)", "json_data = urllib.unquote(unescaped)", "unescaped = urllib.parse.unquote_plus(unescaped)", "json.loads(unescaped)", "json_data = json.loads(unescaped)", "json_data = urllib.parse.unquote(unescaped)"], "references": "json_data = json.loads(unescaped)"}
{"predictions": ["with open('newFile', 'wb') as newFile:", "newFileBytes.tofile(newFile)", "with open(newFile, 'wb') as newFileBytes:", "with open('newFile', 'wb') as f:", "with open(newFile, 'wb') as f:", "with open('newFile', 'wb') as f:", "with open(newFile, 'wb') as f:", "with open(newFile, 'wb') as newFile:", "with open('newFile', 'wb') as newFile:", "with open(newFile, 'wb') as f:"], "references": "newFile.write(struct.pack('5B', *newFileBytes))"}
{"predictions": ["last_key = dict.popitem()[0]", "last_key = dict[-1]", "last_key = dict.keys()[-1]", "last_key = dict.popitem()", "print(dict.popitem())", "print(dict[-1])", "last_key = dict.popitem(last=True)", "last_key = dict.popitem(last=False)", "last_key = dict.popitem()[0]", "last_key = dict.keys()[-1]"], "references": "list(dict.keys())[-1]"}
{"predictions": ["now = datetime.datetime.now()", "now = datetime.now()", "datetime.datetime.now()", "dt = datetime.datetime.now()", "dt = datetime.now()", "from datetime import datetime", "datetime.now()", "today = datetime.now()", "today = datetime.datetime.now()", "from datetime import datetime"], "references": "datetime.datetime.now()"}
{"predictions": ["x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])", "x = np.array([[1,2,3],[4,5,6],[7,8,9]])", "import numpy as np", "import numpy as np", "x = np.array([[1,2,3],[4,5,6]])", "x = np.array([[1, 2, 3], [4, 5, 6]])", "import numpy as np", "import numpy as np", "import numpy as np", "x = np.array([[1,2,3],[4,5,6],[7,8,9]])"], "references": "max(x.min(), x.max(), key=abs)"}
