{"predictions": ["urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(ur", "unicodedata.normalize('NFKD', '4a4b4c').encode('ascii', 'ignore')", "b'4a4b4c'.decode('hex')", "bytes.decode('hex')", "codecs.decode('4a4b4c', 'hex')", "urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote('4", "bytes.fromhex('4a4b4c').decode('utf-8')", "urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote('4a4b4c'))))", "urllib.parse.unquote(urllib.parse.unquote('4a4b4c'))", "urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote(urllib.parse.unquote('4a4b4c'))))"], "references": "bytes.fromhex('4a4b4c').decode('utf-8')"}
{"predictions": ["d.decode('cp1251').encode('utf8')", "d.decode('cp1251').encode('utf-8')", "d.encode('cp1251').decode('utf8')", "d.decode('cp1251')", "d.encode('cp1251').decode('utf-8')", "d.encode('utf-8')", "print(d.decode('cp1251').encode('utf8'))", "d.encode('utf8')", "print(d.decode('cp1251'))", "d.decode('cp1251').encode('UTF-8')"], "references": "d.decode('cp1251').encode('utf8')"}
{"predictions": ["subprocess.check_output('ps -ef | grep something | wc -l', shell=True)", "subprocess.call('ps -ef | grep something | wc -l', shell=True)", "subprocess.call(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'])", "subprocess.call(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'])", "os.system('ps -ef | grep something | wc -l')", "print(subprocess.check_output('ps -ef | grep something | wc -l', shell=True))", "subprocess.check_output(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'])", "print(subprocess.check_output('ps -ef | grep something | wc -l', shell=True).decode('utf-8'))", "subprocess.check_output(['ps', '-ef', '|', 'grep', something, '|', 'wc', '-l'])", "print(subprocess.check_output(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l']))"], "references": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"}
{"predictions": ["s1.intersection(s2)", "pd.merge(s1, s2, how='inner', left_index=True, right_index=True)", "pd.concat([s1, s2]).drop_duplicates()", "pd.merge(s1, s2, left_index=True, right_index=True)", "pd.merge(s1, s2, how='inner')", "pd.merge(s1, s2, left_index=True, right_index=True, how='inner')", "pd.concat([s1, s2])", "pd.concat([s1, s2]).drop_duplicates(keep=False)", "pd.concat([s1, s2], ignore_index=True)", "pd.merge(s1, s2)"], "references": "pd.Series(list(set(s1).intersection(set(s2))))"}
{"predictions": ["when.strftime('%Y-%m-%d')", "when.date()", "datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S')", "datetime.strptime(when, '%Y-%m-%d %H:%M:%S')", "datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strptime(when, '%Y-%m-%dT%H:%M:%SZ')", "when.strftime('%Y-%m-%d %H:%M:%S')", "datetime.strptime(when, '%Y-%m-%d %H:%M:%S.%f')", "datetime.strptime(when, '%Y-%m-%dT%H:%M:%SZ')", "datetime.datetime.strptime(when, '%Y-%m-%d %H:%M:%S').date()"], "references": "datetime.datetime.strptime(when, '%Y-%m-%d').date()"}
{"predictions": ["np.sum(a, axis=1)", "a.sum(axis=1)", "np.sum(a, axis=0)", "sum(sum(a))", "np.sum(a)", "sum(a, axis=1)", "a.sum(axis=0)", "np.sum(a, axis=(1, 2))", "np.sum(np.sum(a, axis=1), axis=0)", "np.sum(a, axis=1, keepdims=True)"], "references": "a.sum(axis=1)"}
{"predictions": ["warnings.simplefilter('always')", "warnings.filterwarnings('always')", "import warnings warnings.simplefilter('always')", "warnings.simplefilter('always', UserWarning)", "logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')", "import warnings warnings.filterwarnings('always')", "warnings.simplefilter('always', DeprecationWarning)", "logging.basicConfig(level=logging.DEBUG,                     format='%(asctime)s %(levelname)-8s %(message)s',                     datefmt='%Y-%m-%d %H:%M:%S')", "logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)-8s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')", "logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',                     datefmt='%Y-%m-%d %H:%M:%S"], "references": "warnings.simplefilter('always')"}
{"predictions": ["datetime.datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "datetime.datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "time.strptime('30/03/09 16:31:32.123', '%d/%m/%Y %H:%M:%S.%f')", "datetime.datetime.strptime('30/03/09 16:31:32.123', '%Y/%m/%d %H:%M:%S.%f')", "datetime.datetime.strptime('30/03/09 16:31:32.123', '%m/%d/%y %H:%M:%S.%f')", "datetime.strptime('30/03/09 16:31:32.123', '%Y/%m/%d %H:%M:%S.%f')", "datetime.strptime('30/03/09 16:31:32.123', '%m/%d/%y %H:%M:%S.%f')"], "references": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')"}
{"predictions": ["sys.path.append('/path/to/whatever')", "sys.path.insert(0, '/path/to/whatever')", "os.environ['PYTHONPATH'] = '/path/to/whatever'", "os.chdir('/path/to/whatever')", "import sys sys.path.append('/path/to/whatever')", "import sys sys.path.insert(0, '/path/to/whatever')", "import os os.environ['PYTHONPATH'] = '/path/to/whatever'", "os.environ['PATH'] = '/path/to/whatever'", "import sys; sys.path.append('/path/to/whatever')", "sys.path.insert(1, '/path/to/whatever')"], "references": "sys.path.append('/path/to/whatever')"}
{"predictions": ["urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3','mp3.mp3')", "urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\",'mp3.mp3')", "urlretrieve('http://www.example.com/songs/mp3.mp3','mp3.mp3')", "urllib.urlretrieve('http://www.example.com/songs/mp3.mp3','mp3.mp3')", "request.urlretrieve('http://www.example.com/songs/mp3.mp3','mp3.mp3')", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', filename='mp3.mp3')", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', \"mp3.mp3\")", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', './mp3.mp3')", "urllib2.urlopen('http://www.example.com/songs/mp3.mp3').read()"], "references": "urllib.request.urlretrieve('https://github.com/zorazrw/multilingual-conala/blob/master/dataset/test/es_test.json','mp3.mp3')"}
{"predictions": ["urllib.request.urlopen('http://www.example.com/')", "urllib.request.urlretrieve('http://www.example.com/', 'example.txt')", "urllib.request.urlretrieve('http://www.example.com/', 'example.html')", "urllib.request.urlretrieve('http://www.example.com/')", "urllib.request.urlretrieve('http://www.example.com/', 'example.zip')", "urllib.request.urlretrieve('http://www.example.com/', filename)", "urllib.request.urlretrieve('http://www.example.com/', 'example.pdf')", "urllib2.urlopen('http://www.example.com/')", "urllib.request.urlretrieve('http://www.example.com/', 'file.txt')", "urllib.request.urlretrieve('http://www.example.com/', 'test.txt')"], "references": "html = urllib.request.urlopen(url).read()"}
{"predictions": ["urllib.request.urlretrieve(url, filename)", "urllib.request.urlopen(url)", "urllib.request.urlopen(url).read()", "urllib.request.urlretrieve(url, file_name)", "urllib.request.urlretrieve(url, os.path.basename(url))", "urllib.request.urlretrieve(url, path)", "urllib.request.urlretrieve(url, fname)", "urllib.request.urlretrieve(url)", "urllib.request.urlretrieve(url, 'filename')", "urllib.request.urlretrieve(url, filename=filename)"], "references": "requests.get(url)"}
{"predictions": ["urllib.request.urlretrieve(url, '10MB')", "urllib.request.urlretrieve(url, '10MB.zip')", "urllib.request.urlretrieve(url, '10MB.txt')", "urllib.request.urlretrieve(url, \"10MB\")", "urllib.request.urlretrieve(url, filename='10MB')", "urllib.request.urlretrieve(url, filename, 10 * 1024 * 1024)", "urllib.request.urlretrieve(url, '10MB.pdf')", "urllib.request.urlretrieve(url, filename, reporthook)", "urllib.request.urlretrieve(url, \"10MB.zip\")", "urllib.request.urlretrieve(url, '10MB.csv')"], "references": "response = requests.get(url, stream=True)  with open('10MB', 'wb') as handle:   for data in response.iter_content():    handle.write(data)"}
{"predictions": ["P.dot(T)", "T * P", "np.matmul(P, T)", "T.dot(P)", "np.multiply(P, T)", "P * T", "np.dot(P, T)", "np.einsum('ij,ijk-", "np.tensordot(P, T, axes=([1, 2], [1, 2]))", "np.einsum('ij,ijk-"], "references": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"}
{"predictions": ["float.fromhex('470FC614')", "float('0x470FC614'.replace('0x', ''))", "float(int('470FC614', 16))", "float(('0x' + '470FC614').replace('0x', ''))", "float(('0x' + '470FC614'))", "float('0x' + '470FC614')", "float(('0x' + '470FC614').replace(' ', ''))", "float(0x470FC614)", "float(('0x' + '470FC614').decode('hex'))", "float('0x470FC614'.replace('0x', ''), 16)"], "references": "struct.unpack('!f', bytes.fromhex('470FC614'))[0]"}
{"predictions": ["list(reversed(range(1, 11)))", "list(reversed(list(range(1, 11))))", "reversed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "reversed(list(range(1, 11)))", "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "reversed(range(1, 11))", "list.reverse()", "list(reversed(range(1, 10)))", "[i for i in range(10, 0, -1)]", "[i for i in range(10, 1, -1)]"], "references": "list(reversed(list(range(10))))"}
{"predictions": ["datetime.date.today() - datetime.timedelta(days=7)", "datetime.datetime.now() - datetime.timedelta(days=7)", "datetime.date.today() - datetime.timedelta(7)", "date.today() - timedelta(days=7)", "(datetime.datetime.now() - datetime.timedelta(days=7)).strftime('%Y-%m-%d')", "(datetime.date.today() - datetime.timedelta(days=7)).strftime('%Y-%m-%d')", "datetime.datetime.today() - datetime.timedelta(days=7)", "(datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')", "(datetime.datetime.now() - datetime.timedelta(7)).strftime('%Y-%m-%d')", "(datetime.date.today() - datetime.timedelta(7)).strftime('%Y-%m-%d')"], "references": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"}
{"predictions": ["base64.b64encode('your string')", "base64.b64encode('your string'.encode('utf-8'))", "base64.b64encode('your string'.encode('utf-8')).decode('utf-8')", "base64.b64encode('your string'.encode('utf-8')).decode('ascii')", "base64.b64encode('your string'.encode('ascii')).decode('ascii')", "base64.b64encode('your string'.encode('ascii'))", "base64.b64encode('your string'.encode())", "base64.b64encode(your_string)", "b64encode('your string'.encode('ascii')).decode('ascii')", "b64encode('your string'.encode('utf-8')).decode('utf-8')"], "references": "base64.b64encode(bytes('your string', 'utf-8'))"}
{"predictions": ["request.args.get('myParam')", "request.args.get('myParam', None)", "request.args.get('myParam', '')", "request.args['myParam']", "print(request.args.get('myParam'))", "flask.request.args.get('myParam')", "request.values.get('myParam')", "request.args.get('myParam', False)", "request.args.get('myParam', default=None)", "return request.args.get('myParam')"], "references": "request.args['myParam']"}
{"predictions": ["set(mylist)", "list(set(mylist))", "[x for x in mylist if mylist.count(x) ", "list(dict.fromkeys(mylist))", "set([x for x in mylist if mylist.count(x) ", "sorted(list(set(mylist)))", "[x for x, y in zip(mylist, mylist[1:]) if x == y]", "[(x, y) for x, y in zip(mylist, mylist[1:]) if x == y]", "sorted(set(mylist))", "[x for x in set(mylist)]"], "references": "[k for k, v in list(Counter(mylist).items()) if v > 1]"}
{"predictions": ["x.rsplit('-', 1)", "x.split('-')", "x.rsplit('-')", "re.split('-', x)", "x.rsplit('-', 1)[0]", "re.findall('(?", "re.findall('-\\\\d+', x)", "re.findall('(.*)-(.*)', x)", "x.rsplit('-', 1)[-1]", "x.rsplit('-', 1)[1]"], "references": "x.rpartition('-')[0]"}
{"predictions": ["s.rpartition('-')[2]", "s.rsplit('-', 1)[-1]", "s.rsplit('-', 1)[1]", "s.rsplit('-')[-1]", "s.rpartition('-')", "s.rsplit('-', 1)[0]", "re.split('-', s)[-1]", "re.sub('-.*$', '', s)", "s.rpartition('-')[-1]", "s.rpartition('-')[0]"], "references": "x.rsplit('-', 1)[0]"}
{"predictions": ["random.sample(range(100), 10)", "[random.randint(0, 100) for i in range(10)]", "random.sample(range(10), 10)", "[random.randint(0, 100) for _ in range(10)]", "[random.randint(0, 10) for i in range(10)]", "[random.randint(1, 100) for i in range(10)]", "random.sample(range(1, 100), 10)", "random.sample(range(10), 5)", "[random.randint(0, 100) for x in range(10)]", "[random.randint(0, 10) for _ in range(10)]"], "references": "[int(1000 * random.random()) for i in range(10000)]"}
{"predictions": ["time.strftime('%Y-%m-%d %H:%M:%S.%f')", "time.strftime('%Y-%m-%d %H:%M:%S.%f', time.localtime(time.time()))", "time.strftime('%Y-%m-%d %H:%M:%S.%f', time.gmtime())", "time.strftime('%Y-%m-%d %H:%M:%S.%f', time.localtime())", "datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')", "print(time.strftime('%Y-%m-%d %H:%M:%S.%f'))", "datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')", "time.strftime('%Y-%m-%d %H:%M:%S.%f', time.gmtime(time.time()))", "time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))"], "references": "datetime.datetime.now().strftime('%H:%M:%S.%f')"}
{"predictions": ["print('\\n'.join(['\\t'.join(row) for row in tab]))", "print('\\n'.join(['\\t'.join(x) for x in tab]))", "print('\\n'.join(['\\t'.join([str(x) for x in y]) for y in tab]))", "print('\\n'.join(['\\t'.join([str(cell) for cell in row]) for row in tab]))", "print('\\n'.join(['\\t'.join([str(item) for item in row]) for row in tab]))", "print('\\n'.join([' '.join(row) for row in tab]))", "print('\\n'.join('\\t'.join(map(str, row)) for row in tab))", "print('\\n'.join(['\\t'.join([str(x) for x in row]) for row in tab]))", "print('\\n'.join(['\\t'.join(map(str, row)) for row in tab]))", "print(tabulate(tab, headers=headers, tablefmt='grid'))"], "references": "'\\n'.join('\\t'.join(str(col) for col in row) for row in tab)"}
{"predictions": ["print('Goals: {}, Penalties: {}'.format(goals, penalties))", "print('Goals: {0:d}'.format(goals)) print('Penalties: {0:d}'.format(penalties))", "print('Goals: {0}, Penalties: {1}'.format(goals, penalties))", "print('Goals: {0}'.format(goals)) print('Penalties: {0}'.format(penalties))", "print('Goals: {}'.format(goals)) print('Penalties: {}'.format(penalties))", "print('goals: {}, penalties: {}'.format(goals, penalties))", "print('Goals: {0[0]}, Penalties: {0[1]}'.format(goals))", "print('Goals: {0[0]} | Penalties: {0[1]}'.format(goals))", "print('Goals: {0[0]}, Penalties: {0[1]}'.format(goals + penalties))", "print('Goals: {0[0]} | Penalties: {0[1]}'.format(goals + penalties))"], "references": "\"\"\"({:d} goals, ${:d})\"\"\".format(goals, penalties)"}
{"predictions": ["df.sum(axis=0)", "df.count(axis=0)", "df.count(axis=1)", "(df!= 0).sum(axis=0)", "df.apply(lambda x: sum(x!= 0), axis=0)", "df.apply(np.count_nonzero)", "df.count()", "df.apply(lambda x: sum(x!= 0), axis=1)", "df.apply(lambda x: (x!= 0).sum(), axis=0)", "df.apply(lambda x: sum(x.values!= 0), axis=0)"], "references": "df.astype(bool).sum(axis=1)"}
{"predictions": ["datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "time.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strptime('%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M:%S.%f')", "pd.to_datetime(string_date, format='%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f').strftime('%Y-%m-%d %H:%M:%S')", "string_date = datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "parser.parse('%Y-%m-%d %H:%M:%S.%f')", "datetime.datetime.strptime(string_date, \"%Y-%m-%d %H:%M:%S.%f\")", "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f').strftime('%Y-%m-%d %H:%M:%S.%f')"], "references": "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')"}
{"predictions": ["re.sub('\\\\W+','', text.lower())", "re.sub('[^A-Za-z0-9 ]+', '', text)", "re.sub('[^A-Za-z ]+', '', text)", "re.sub('[^a-zA-Z ]+', '', text)", "re.sub('[^\\\\w\\\\s]', '', text)", "re.sub('\\\\W+','', text)", "re.sub('\\\\W+','', text.lower()).strip()", "re.sub('[^a-zA-Z0-9 ]+', '', text)", "re.sub('[^0-9a-zA-Z ]+', '', text)", "re.sub('\\\\W+','', text).strip()"], "references": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"}
{"predictions": ["re.sub('\\\\W+','', text).lower()", "re.sub('\\\\W+','', text.lower())", "re.sub('[^a-z0-9 ]+', '', text.lower())", "re.sub('[^a-z ]+', '', text.lower())", "re.sub('[^A-Za-z0-9 ]+', '', text)", "re.sub('[^A-Za-z0-9 ]+', '', text.lower())", "re.sub('\\\\W+','', text.lower()).strip()", "re.sub('[^A-Za-z0-9 ]+', '', text).lower()", "re.sub('[^0-9a-z ]+', '', text.lower())", "re.sub('[^A-Za-z ]+', '', text.lower())"], "references": "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"}
{"predictions": ["re.findall('2.MATCHES $$TEXT$$ STRING', '2.MATCHES $$TEXT$$ STRING')", "re.split('\\\\$$TEXT$$', '2.MATCHES $$TEXT$$ STRING')", "re.findall('\\\\$\\\\$TEXT\\\\$$STRING', '2.MATCHES $$TEXT$$ STRING')", "re.findall('2.MATCHES \\\\$$TEXT$$ STRING', '2.MATCHES $$TEXT$$ STRING')", "re.findall('\\\\$\\\\{(.*?)\\\\}\\\\$\\\\{(.*?)\\\\}', '2.MATCHES $$TEXT$$ STRING')", "re.findall('\\\\$\\\\$TEXT\\\\$$STRING\\\\$\\\\$', '2.MATCHES $$TEXT$$ STRING')", "re.findall('2.MATCHES \\\\$$TEXT\\\\$$ STRING', '2.MATCHES $$TEXT$$ STRING')", "re.findall('2.MATCHES $$TEXT$$ STRING', s)", "re.findall('2.MATCHES $$TEXT$$ STRING', '2.MATCHES $$TEXT$$ STRING', re.IGNORECASE)", "re.findall('2.MATCHES $$TEXT$$ STRING', text)"], "references": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]"}
{"predictions": ["soup.find('name')", "soup.name", "print(soup.name)", "print(soup.find('name'))", "soup.findAll('name')", "soup.find(name='name')", "soup.findAll(name='name')", "soup.find_all('name')", "soup.find_all(name='name')", "soup.select('name')"], "references": "soup.find('name').string"}
{"predictions": ["len(open(filepath).read())", "len(open(filepath, 'r').read())", "print(len(open(filepath).read()))", "sum(1 for line in open(filepath))", "len(open(filepath, 'rb').read())", "sum(len(line) for line in open(filepath))", "print(len(open(filepath, 'r').read()))", "sum(1 for _ in open(filepath))", "len(open(filepath, 'rU').read())", "len(open(filepath).read().replace('\\n', ''))"], "references": "os.stat(filepath).st_size"}
{"predictions": ["len([x for x in l if x == 'a'])", "[i for i in range(len(l)) if l[i] == 'a']", "len([i for i in l if i == 'a'])", "count = 0 for i in range(len(l)):     if l[i] == 'a':         count += 1", "sum(1 for x in l if x == 'a')", "len(list(filter(lambda x: x == 'a', l)))", "[i for i, x in enumerate(l) if x == 'a']", "[i for i in l if i == 'a']", "count = 0 for i in l:     if i == 'a':         count += 1", "[x for x in l if x == 'a']"], "references": "l.count('a')"}
{"predictions": ["len(l)", "[(x, l.count(x)) for x in set(l)]", "Counter(l)", "len(list(set(l)))", "[(i, l.count(i)) for i in set(l)]", "[i for i in range(len(l)) if l.count(i) ", "[(i, l.count(i)) for i in l]", "[(x, l.count(x)) for x in l]", "len(set(l))", "[(x, y) for x, y in enumerate(l)]"], "references": "Counter(l)"}
{"predictions": ["len(l)", "[(x, l.count(x)) for x in set(l)]", "Counter(l)", "len(list(set(l)))", "[(i, l.count(i)) for i in set(l)]", "[i for i in range(len(l)) if l.count(i) ", "[(i, l.count(i)) for i in l]", "[(x, l.count(x)) for x in l]", "len(set(l))", "[(x, y) for x, y in enumerate(l)]"], "references": "[[x, l.count(x)] for x in set(l)]"}
{"predictions": ["len(l)", "[(x, l.count(x)) for x in set(l)]", "Counter(l)", "len(list(set(l)))", "[(i, l.count(i)) for i in set(l)]", "[i for i in range(len(l)) if l.count(i) ", "[(i, l.count(i)) for i in l]", "[(x, l.count(x)) for x in l]", "len(set(l))", "[(x, y) for x, y in enumerate(l)]"], "references": "dict(((x, l.count(x)) for x in set(l)))"}
{"predictions": ["len([x for x in l if x == 'b'])", "len([i for i in l if i == 'b'])", "len(list(filter(lambda x: x == 'b', l)))", "[i for i in range(len(l)) if l[i] == 'b']", "count = 0 for i in range(len(l)):     if l[i] == 'b':         count += 1", "[i for i in l if i == 'b']", "sum(1 for x in l if x == 'b')", "count = 0 for i in l:     if i == 'b':         count += 1", "[b for b in l if b == 'b']", "sum(1 for i in l if i == 'b')"], "references": "l.count('b')"}
{"predictions": ["shutil.copy(srcfile, dstdir)", "shutil.copyfile(srcfile, os.path.join(dstdir, os.path.basename(srcfile)))", "shutil.copy2(srcfile, dstdir)", "copyfile(srcfile, os.path.join(dstdir, os.path.basename(srcfile)))", "shutil.copyfile(srcfile, dstfile)", "shutil.copyfile(srcfile, dstdir + '/' + os.path.basename(srcfile))", "shutil.copyfile(srcfile, dstdir + os.path.basename(srcfile))", "shutil.copyfile(srcfile, dstdir + os.sep + os.path.basename(srcfile))", "copy(srcfile, dstdir)", "shutil.copyfile(srcfile, os.path.join(dstdir, os.path.split(srcfile)[1]))"], "references": "shutil.copy(srcfile, dstdir)"}
{"predictions": ["df['c'] = df['b'] + df['a']", "df['c'] = df['a'] + df['b']", "df['c'] = df['b'].astype(str) + df['a'].astype(str)", "df['c'] = df.b + df.a", "pd.concat([df['a'], df['b']], axis=1)", "df['c'] = df['b'].astype(str) + df['a']", "df['c'] = df['b'].astype(float) + df['a'].astype(float)", "df['c'] = df['a'].astype(str) + df['b'].astype(str)", "df['c'] = df.apply(lambda x: x['b'] + x['a'], axis=1)", "df['c'] = df['b'].map(df['a'])"], "references": "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"}
{"predictions": ["list(t)", "t = list(t)", "[x for x in t]", "[t[i] for i in range(len(t))]", "[x for x in list(t)]", "[i for i in t]", "[list(i) for i in t]", "[list(x) for x in t]", "[e for e in t]", "[item for item in t]"], "references": "list(t)"}
{"predictions": ["t = tuple(t)", "tuple(t)", "(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15", "(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14])", "(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13])", "(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12])", "(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11])", "(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10])", "(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9])", "(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10],  t[11], t[12], t[13], t[14], t["], "references": "tuple(t)"}
{"predictions": ["list(level1)", "level1 = list(level1)", "[item for sublist in level1 for item in sublist]", "[x for x in level1]", "[x[0] for x in level1]", "[list(x) for x in level1]", "[i for i in level1]", "[level1]", "[item for item in level1]", "map(list, level1)"], "references": "level1 = map(list, level1)"}
{"predictions": ["logFile.write(pprint.pformat(dataobject))", "pprint.pprint(dataobject, logFile)", "dataobject.pprint(logFile)", "with open(logFile, 'w') as f:     pprint.pprint(dataobject, stream=f)", "with open(logFile, 'w') as f:     pprint(dataobject, stream=f)", "dataobject.write(logFile)", "with open(logFile, 'w') as f:     pprint.pprint(dataobject, f)", "pprint(dataobject, stream=logFile)", "print(dataobject, file=logFile)", "pprint(dataobject, logFile)"], "references": "pprint.pprint(dataobject, logFile)"}
{"predictions": ["df.index[df['BoolCol'] == True]", "df[df['BoolCol'] == True].index", "df[df['BoolCol']].index", "df.index[df['BoolCol']].tolist()", "np.argwhere(df['BoolCol'] == True)", "df.loc[df['BoolCol']].index", "df[df.BoolCol == True].index", "df.loc[df['BoolCol'] == True].index", "df.loc[df['BoolCol'] == True]", "df.loc[(df['BoolCol'] == True)]"], "references": "df.loc[df['BoolCol']]"}
{"predictions": ["df[df['BoolCol'] == True].index", "df.loc[df['BoolCol'] == True].index", "df[df.BoolCol == True].index", "list(df[df['BoolCol'] == True].index)", "df[df['BoolCol'] == True]", "df.loc[df['BoolCol'] == True]", "df.index[df['BoolCol'].values == True]", "df[df['BoolCol'] == True].index.values", "df[df['BoolCol'].astype(bool)].index", "df[df['BoolCol'].astype(bool)]"], "references": "df.iloc[np.flatnonzero(df['BoolCol'])]"}
{"predictions": ["df[df['BoolCol'] == True].index", "df[df['BoolCol'] == True].index.tolist()", "df[df['BoolCol']]", "list(df[df['BoolCol'] == True].index)", "df.index[df['BoolCol'].values == True]", "df[df['BoolCol']].index.tolist()", "df[df['BoolCol']].index", "df[df.BoolCol == True].index", "df.index[df['BoolCol'] == True]", "df[df['BoolCol'] == True].index.values"], "references": "df[df['BoolCol'] == True].index.tolist()"}
{"predictions": ["df[df['BoolCol'] == True].index", "df.loc[df['BoolCol'] == True]", "df[df['BoolCol'] == True]", "df.index[df['BoolCol'] == True]", "df[df.BoolCol == True].index", "df[df['BoolCol']]", "df.loc[(df['BoolCol'] == True)]", "df.loc[df['BoolCol'] == True].index", "df[df['BoolCol']].index", "df[df['BoolCol'] == True].index.values"], "references": "df[df['BoolCol']].index.tolist()"}
{"predictions": ["os.chdir(owd)", "os.chdir(os.path.dirname(os.path.realpath(__file__)))", "os.chdir('owd')", "os.chdir(os.path.dirname(os.path.abspath(__file__)))", "os.chdir(os.path.join(os.getcwd(), 'owd'))", "os.chdir(os.path.dirname(__file__))", "os.chdir(wd)", "os.chdir('..')", "os.chdir(self.owd)", "os.chdir(os.path.abspath(owd))"], "references": "os.chdir(owd)"}
{"predictions": ["soup.find('div', id='main-content')", "soup.find('div', {'id':'main-content'})", "soup.find('div', attrs={'id':'main-content'})", "soup.find('div', id='main-content').decompose()", "soup.find('div', {'id':'main-content'}).decompose()", "soup.find(id='main-content').decompose()", "soup.find('div', attrs={'id':'main-content'}).decompose()", "soup.find('div', id='main-content').extract()", "soup.find('div', {'id':'main-content'}).extract()", "soup.find(id='main-content')"], "references": "soup.find('div', id='main-content').decompose()"}
{"predictions": ["df[df['ids'].str.contains('ball')]", "df[df.ids.str.contains('ball')]", "df.loc[df['ids'].str.contains('ball')]", "df = df[df['ids'].str.contains('ball')]", "df[(df['ids'].str.contains('ball'))]", "df.loc[df.ids.str.contains('ball')]", "df[df['ids'].str.contains('ball', case=False)]", "df.loc[(df['ids'].str.contains('ball'))]", "df.loc[df['ids'].str.contains('ball'), :]", "df[df['ids'].str.contains('ball', na=False)]"], "references": "df[df['ids'].str.contains('ball')]"}
{"predictions": ["df.reset_index(inplace=True)", "df.reset_index(level=0, inplace=True)", "df.set_index(df.columns, inplace=True)", "df.reset_index()", "df.columns = df.index", "df.reset_index(inplace=True, drop=True)", "df.reset_index(drop=True)", "df.reset_index(drop=True, inplace=True)", "df.set_index(df.columns.values, inplace=True)", "df.set_index(df.index, inplace=True)"], "references": "df.reset_index(level=['tick', 'obs'])"}
{"predictions": ["[(a[i], b[i]) for i in range(len(a))]", "list(zip(a, b))", "[(x, y) for x, y in zip(a, b)]", "zip(a, b)", "[(i, j) for i, j in zip(a, b)]", "[(b[i], a[i]) for i in range(len(a))]", "[(a, b) for a, b in zip(a, b)]", "[(a[i], b[i]) for i in range(len(b))]", "[(a[i], b[i]) for i in range(0, len(a))]", "[(b[i], a[i]) for i in range(len(b))]"], "references": "np.array([zip(x, y) for x, y in zip(a, b)])"}
{"predictions": ["zip(a, b)", "list(zip(a, b))", "[(x, y) for x, y in zip(a, b)]", "[[a[i][j] for j in range(len(a[0]))] for i in range(len(a))]", "np.vstack((a, b))", "[[a[i][j] for j in range(len(a[i]))] for i in range(len(a))]", "np.array(list(zip(a, b)))", "zip(*[a, b])", "np.concatenate((a, b), axis=1)", "np.concatenate((a, b), axis=0)"], "references": "np.array(list(zip(a.ravel(),b.ravel())), dtype=('i4,i4')).reshape(a.shape)"}
{"predictions": ["re.findall('\\\\{.*?\\\\}', 'abcd}def')", "re.findall('\\\\}', 'abcd}def')", "re.findall('\\\\w+\\\\}', 'abcd}def')", "re.findall('abcd}def$', 'abcd}def')", "re.findall('\\\\w+\\\\}\\\\w+', 'abcd}def')", "re.findall('(?", "re.findall('(?", "re.findall('(?", "re.findall('abcd}def}', 'abcd}def')", "re.findall('\\\\w+\\\\}\\\\w+\\\\}\\\\w+', 'abcd}def')"], "references": "'abcd}def}'.rfind('}')"}
{"predictions": ["mystring.replace(' ', '_')", "re.sub(' ', '_', mystring)", "mystring = mystring.replace(' ', '_')", "re.sub(' +', '_', mystring)", "re.sub('\\\\s+', '_', mystring)", "mystring = re.sub(' ', '_', mystring)", "mystring = re.sub(' +', '_', mystring)", "mystring.replace(' ', '_').replace('.', '_')", "re.sub('\\\\s', '_', mystring)", "mystring.replace(' ', '_').replace('-', '_')"], "references": "mystring.replace(' ', '_')"}
{"predictions": ["np.random.shuffle(r)", "r = r[:, np.random.permutation(r.shape[1])]", "r = np.random.permutation(r)", "np.random.shuffle(r, axis=1)", "numpy.random.shuffle(r)", "np.random.shuffle(r, axis=0)", "np.random.shuffle(r.T)", "r = np.random.permutation(r.T).T", "np.random.shuffle(np.transpose(r))", "r = r[np.random.permutation(r.shape[0])]"], "references": "np.random.shuffle(np.transpose(r))"}
{"predictions": ["len([f for f in os.listdir(os.getcwd()) if os.path.isfile(os.path.join(os.getcwd(), f))])", "len([x for x in os.listdir('.') if os.path.isfile(x)])", "len([f for f in os.listdir('.') if os.path.isfile(f)])", "len([x for x in os.listdir('C:') if os.path.isfile(os.path.join('C:', x))])", "len([x for x in os.listdir('C:\\\\') if os.path.isfile(os.path.join('C:\\\\', x))])", "len([x for x in os.listdir('/') if os.path.isfile(os.path.join('/', x))])", "len([f for f in listdir(path) if isfile(join(path, f))])", "len([f for f in os.listdir('.') if os.path.isfile(os.path.join('.', f))])", "len(os.listdir(drive))", "len(os.listdir(os.getcwd()))"], "references": "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}
{"predictions": ["cursor.fetchone()", "result = cursor.fetchone()", "row = cursor.fetchone()", "cursor.fetchall()", "print(cursor.fetchone())", "for row in cursor:     pass", "list(cursor.fetchone())", "cursor.fetchall()[0][0]", "next(cursor)", "for row in cursor:     print(row)"], "references": "cursor.fetchone()[0]"}
{"predictions": ["sorted(list, key=lambda x: (x[0], x[-1]))", "sorted(list, key=lambda x: (x[0], x[1]))", "sorted(list, key=lambda x: (x[0], -x[1]))", "sorted(list, key=operator.itemgetter(0), reverse=True)", "list.sort(key=lambda x: (x[0], x[-1]))", "sorted(list, key=itemgetter(0), reverse=True)", "sorted(list, key=operator.itemgetter(0, -1))", "sorted(list, key=lambda x: (x[0], x[1]), reverse=True)", "sorted(list, key=itemgetter(0, -1))", "list.sort(key=lambda x: (x[0], -x[1]))"], "references": "sorted(list, key=lambda x: (x[0], -x[1]))"}
{"predictions": ["df.sort_values(by=['System_num', 'Dis'])", "df.sort_values(by=['System_num', 'Dis'], inplace=True)", "df.sort_values(['System_num', 'Dis'], inplace=True)", "df.sort_values(by=['System_num', 'Dis'], ascending=False)", "df.sort(['System_num', 'Dis'], ascending=[True, False])", "df.sort_values(['System_num', 'Dis'], ascending=[True, False])", "df.sort_values(['System_num', 'Dis'])", "df.sort(['System_num', 'Dis'])", "df.sort_values(by=['System_num', 'Dis'], ascending=[True, False])", "df.sort(['System_num', 'Dis'], inplace=True)"], "references": "df.sort_values(['System_num', 'Dis'])"}
{"predictions": ["with open(infile, 'r') as fin, open(outfile, 'w') as fout:     fout.write('#test firstline\\n')     for line in fin:         fout.write(line)", "with open(infile, 'r') as infile, open(outfile, 'w') as outfile:     outfile.write('#test firstline\\n')     for line in infile:         outfile.write(line)", "with open(infile, 'r') as infile, open(outfile, 'w') as outfile:     outfile.write('#test firstline\\n')     outfile.write(infile.read())", "with open(infile, 'r') as infile, open(outfile, 'w') as outfile:     outfile.write('#test firstline\\n')     outfile.writelines(infile)", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())", "open('outfile', 'w').write('#test firstline\\n')", "with open(infile, 'r') as fin, open(outfile, 'w') as fout:     fout.write('#test firstline\\n')     fout.write(fin.read())", "with open('outfile', 'w') as outfile:     outfile.write('#test firstline\\n')     with open('infile') as infile:         for line in infile:             outfile.write(line)", "with open(infile, 'r') as infile, open(outfile, 'w') as outfile:     outfile.write('#test firstline\\n')     outfile.writelines(infile.readlines())", "with open(infile, 'r') as fin, open(outfile, 'w') as fout:     fout.write('#test firstline\\n')     fout.writelines(fin)"], "references": "open(outfile, 'w').write('#test firstline\\n' + open(infile).read())"}
{"predictions": ["re.search('ba[rzd]', 'foobarrrr')", "re.search('ba[rzd]', foobarrrr)", "re.findall('ba[rzd]', 'foobarrrr')", "re.findall('ba[rzd]', foobarrrr)", "re.search('ba[rzd]', 'foobarrrr') is not None", "re.search('ba[rzd]', foobarrrr) is not None", "re.search('^ba[rzd]', foobarrrr)", "re.search('^ba[rzd]', 'foobarrrr')", "(re.search('ba[rzd]', foobarrrr) is not None)", "(re.search('ba[rzd]', foobarrrr))"], "references": "bool(re.search('ba[rzd]', 'foobarrrr'))"}
{"predictions": ["list(dict.fromkeys(t))", "set(t)", "list(set(t))", "t = list(set(t))", "t = list(dict.fromkeys(t))", "[x for x in t if x not in t[1:]]", "sorted(list(set(t)))", "s = list(set(t))", "[t for t in list(set(t))]", "[(x, y) for x, y in t]"], "references": "list(set(t))"}
{"predictions": ["set(source_list)", "list(dict.fromkeys(source_list))", "[x for n, x in enumerate(source_list) if x not in source_list[:n]]", "list(set(source_list))", "sorted(list(set(source_list)))", "[x for x in source_list if x not in source_list[1:]]", "source_list = list(set(source_list))", "source_list = list(dict.fromkeys(source_list))", "sorted(set(source_list))", "[(x, y) for x, y in zip(source_list, source_list[1:]) if x!= y]"], "references": "list(set(source_list))"}
{"predictions": ["set(abracadabra)", "list(set(abracadabra))", "list(dict.fromkeys(abracadabra))", "sorted(list(set(abracadabra)))", "sorted(set(abracadabra))", "abracadabra = list(set(abracadabra))", "[x for x in abracadabra if x not in abracadabra[1:]]", "abracadabra = list(dict.fromkeys(abracadabra))", "[x for n, x in enumerate(abracadabra) if x not in abracadabra[:n]]", "sorted(set(abracadabra), key=abracadabra.index)"], "references": "list(OrderedDict.fromkeys('abracadabra'))"}
{"predictions": ["list(a)", "a.tolist()", "a = list(a)", "[a[i] for i in range(len(a))]", "[x for x in a]", "[item for sublist in a for item in sublist]", "[i for i in a]", "[a]", "[list(x) for x in a]", "[list(i) for i in a]"], "references": "numpy.array(a).reshape(-1).tolist()"}
{"predictions": ["list(a[0])", "a[0].tolist()", "a.tolist()[0]", "[a[0]]", "[row[0] for row in a]", "list(a[0, :])", "a.flatten().tolist()", "a[0]", "a.tolist()", "[list(row) for row in a]"], "references": "numpy.array(a)[0].tolist()"}
{"predictions": ["soup.find('td', text='Address:').next_sibling", "soup.find('td', text='Address:')", "soup.td.next_sibling.text", "soup.td.next_sibling.get_text()", "soup.find('td', text='Address:').next_sibling.text", "soup.find('td', text='Address:').parent.next_sibling", "soup.find('td', text='Address:').find_next_sibling('td').text", "soup.find('td', text='Address:').next_sibling", "soup.find('td', text='Address:').next_sibling.get_text()", "print(soup.find('td', text='Address:'))"], "references": "soup.find(text='Address:').findNext('td').contents[0]"}
{"predictions": ["sorted(list(d.items()), key=lambda x: x[0])", "sorted(list(d.items()), key=operator.itemgetter(0))", "sorted(list(d.items()))", "sorted(d.items(), key=lambda x: x[0])", "sorted(d.items(), key=operator.itemgetter(0))", "sorted(d, key=list(d.keys()))", "sorted(d.items())", "sorted(list(d.items()), key=lambda t: t[0])", "sorted(list(d.keys()))", "sorted(list(d.items()), key=lambda kv: kv[0])"], "references": "sorted(d.items())"}
{"predictions": ["data.encode('utf-8')", "data.encode('ascii')", "urllib.parse.quote(data)", "data.encode('utf8')", "base64.b64encode(data.encode('utf-8'))", "data.encode('ascii', 'ignore')", "urllib.parse.quote('data to be encoded')", "base64.b64encode(data.encode('utf-8')).decode('utf-8')", "base64.b64encode(data.encode('utf-8')).decode('ascii')", "base64.b64encode(data)"], "references": "base64.b64encode(b'data to be encoded')"}
{"predictions": ["data.encode('ascii')", "data.encode('ascii', 'ignore')", "print(data.encode('ascii'))", "unicodedata.normalize('NFKD', data).encode('ascii', 'ignore')", "data.encode('ascii', 'xmlcharrefreplace')", "data.encode('ascii', 'ignore').decode('ascii')", "data.encode('ascii','replace')", "data.decode('ascii')", "data.encode('ascii', errors='ignore')", "encoded = data.encode('ascii')"], "references": "'data to be encoded'.encode('ascii')"}
{"predictions": ["my_object.my_str", "print(my_object.my_str)", "getattr(my_object,'my_str')", "my_object.my_str", "print(getattr(my_object,'my_str'))", "my_object.get('my_str')", "my_object['my_str']", "my_object.my_str()", "getattr(my_object,'my_str', None)", "my_object.my_attr"], "references": "getattr(my_object, my_str)"}
{"predictions": ["sum(x[0] for x in list_of_pairs)", "sum([x[0] for x in list_of_pairs])", "[x[0] for x in list_of_pairs]", "sum(pair[0] for pair in list_of_pairs)", "sum(t[0] for t in list_of_pairs)", "sum(map(lambda x: x[0], list_of_pairs))", "sum(list(map(lambda x: x[0], list_of_pairs)))", "[sum(x) for x in list_of_pairs]", "[(sum(x[0]), sum(x[1])) for x in list_of_pairs]", "[(sum(x[0]) for x in list_of_pairs]"], "references": "sum([pair[0] for pair in list_of_pairs])"}
{"predictions": ["[0 if x not in [1, 3, 4] else x for x in A]", "[x if x in [1, 3, 4] else 0 for x in A]", "[0 if a not in [1, 3, 4] else a for a in A]", "A[np.isin(A, [1, 3, 4], invert=True)] = 0", "[0 if i not in [1, 3, 4] else i for i in A]", "A[np.in1d(A, [1, 3, 4], invert=True)] = 0", "np.where(np.isin(A, [1, 3, 4]), 0, A)", "np.setdiff1d(A, [1, 3, 4])", "np.setdiff1d(A, [1, 3, 4], assume_unique=True)", "np.setdiff1d(A, [1, 3, 4], axis=0)"], "references": "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"}
{"predictions": ["np.mean(a, axis=1)", "np.mean(a, axis=0)", "a.mean(axis=0)", "a.mean(axis=1)", "np.mean(a, axis=(1, 2))", "np.mean(a, 1)", "np.mean(a, axis=2)", "a.mean(1)", "np.mean(a, axis=(0, 1))", "np.mean(a, 0)"], "references": "np.mean(a, axis=1)"}
{"predictions": ["a[(a[:, 0] == 0) & (a[:, 1] == 1)]", "np.where((a[:, 0] == 0) & (a[:, 1] == 1))", "(a[:, 0] == 0) & (a[:, 1] == 1)", "a[np.logical_and(a[:, 0] == 0, a[:, 1] == 1)]", "a[((a[:, 0] == 0) & (a[:, 1] == 1))]", "np.where(a[:, 0] == 0, a[:, 1], a[:, 0])", "a[(a[:, 0] == 0) & (a[:, 1] == 1), :]", "(a[(a[:, 0] == 0) & (a[:, 1] == 1)]", "(a[(a[:, 0] == 0) & (a[:, 1] == 1)]).tolist()", "(a[(a[:, 0] == 0) & (a[:, 1] == 1)])"], "references": "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"}
{"predictions": ["df.groupby(['col1', 'col2'])['col3'].nunique()", "df.groupby(['col1', 'col2']).size()", "df.groupby(['col1', 'col2']).count()", "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()", "df.groupby(['col1', 'col2'])['col3'].count()", "df.groupby(['col1', 'col2']).nunique()", "df.groupby(['col1', 'col2']).size().reset_index(name='count')", "df.groupby(['col1', 'col2']).col3.nunique()", "df.groupby(['col1', 'col2']).size().reset_index()", "df.groupby(['col1', 'col2']).agg({'col3': 'nunique'})"], "references": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}
{"predictions": ["df = pd.DataFrame({'email': sf.index, 'list': sf.values})", "pd.DataFrame({'email': sf.index, 'list': sf.values})", "df = pd.DataFrame(sf, columns=['email', 'list'])", "df = pd.DataFrame(sf.tolist(), columns=['email', 'list'])", "pd.DataFrame(sf, columns=['email', 'list'])", "df = pd.DataFrame({'email': list(sf), 'list': list(sf)})", "pd.DataFrame({'email': list(sf), 'list': list(sf)})", "pd.DataFrame({'email': list(sf.index), 'list': list(sf.values)})", "df = pd.DataFrame({'email': list(sf.index), 'list': list(sf.values)})", "df = pd.DataFrame(sf)"], "references": "df = pd.DataFrame({'email': sf.index, 'list': sf.values})"}
{"predictions": ["print('\\t'.join(list))", "'\\t'.join(list)", "['\\t'.join(x) for x in list]", "print('\\n'.join(list))", "'\\n'.join(list)", "['\\t'.join(item) for item in list]", "'\\t'.join(map(str, list))", "print('\\t'.join([str(x) for x in list]))", "print('\\t'.join(map(str, list)))", "('\\t'.join(list))"], "references": "'\\t'.join(map(str, list))"}
{"predictions": ["[abs(x - y) for x, y in zip(l1, l2)]", "[max(x, y) for x, y in zip(l1, l2)]", "[abs(i - j) for i, j in zip(l1, l2)]", "sorted(l1, key=lambda x: abs(x[0] - x[1]), reverse=True)[:10]", "[abs(x - y) for (x, y) in zip(l1, l2)]", "sorted(l1, key=lambda x: abs(x[0] - x[1]))[:10]", "sorted(l1, reverse=True)[:10]", "sorted(l1) + sorted(l2)", "sorted(l1, key=lambda x: abs(x[1] - x[2]), reverse=True)[:10]", "sorted(l1, key=lambda x: x[0] - x[1], reverse=True)[:10]"], "references": "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"}
{"predictions": ["soup.findAll('span', {'class':'starGryB sp'})", "soup.find_all('span', class_='starGryB sp')", "soup.findAll('span', attrs={'class':'starGryB sp'})", "soup.find_all('span', {'class':'starGryB sp'})", "soup.findAll('span', class_='starGryB sp')", "soup.find_all(class_='starGryB sp')", "list(soup.findAll('span', {'class':'starGryB sp'}))", "list(soup.find_all('span', {'class':'starGryB sp'}))", "[x for x in soup.find_all('span', class_='starGryB sp')]", "[x for x in soup.findAll('span', {'class':'starGryB sp'})]"], "references": "soup.find_all('span', {'class':'starGryB sp'})"}
{"predictions": ["df.to_sql('test', engine, schema='a_schema')", "df.to_sql('test', engine, schema='a_schema', if_exists='append')", "df.to_sql('test', con=engine, schema='a_schema', if_exists='append')", "df.to_sql('test', con=engine, schema='a_schema')", "df.to_sql('test', engine, schema='a_schema', if_exists='append', index=False)", "df.to_sql('test', con=engine, schema='a_schema', if_exists='append', index=False)", "df.to_sql('test', engine, if_exists='append', schema='a_schema')", "df.to_sql('test', engine, schema='a_schema', if_exists='replace')", "df.to_sql('test', con=engine, schema='a_schema', if_exists='replace')", "df.to_sql('test', engine, if_exists='append')"], "references": "df.to_sql('test', engine)"}
{"predictions": ["sorted(list5, key=lambda x: x[1])", "sorted(list5, key=lambda x: x[2])", "sorted(list5, key=operator.itemgetter(2))", "sorted(list5, key=operator.itemgetter(1))", "list5.sort(key=lambda x: x[1])", "sorted(list5, key=itemgetter(2))", "sorted(list5, key=lambda x: x.degrees)", "sorted(list5, key=lambda x: x['degrees'])", "sorted(list5, key=lambda x: x.degree)", "sorted(list5, key=lambda x: x.deg)"], "references": "sorted(list5, key = lambda x: (degrees(x), x))"}
{"predictions": ["(x for x in l)", "(i for i in l)", "(item for item in l)", "list(l)", "[x for x in l]", "iter(l)", "(e for e in l)", "l = (x for x in l)", "[(x, y) for x, y in l]", "map(lambda x: x, l)"], "references": "(n for n in l)"}
{"predictions": ["obj.attr", "print(obj.attr)", "getattr(obj, 'attr')", "print(getattr(obj, 'attr'))", "attr = obj.attr", "attr = getattr(obj, 'attr')", "getattr(obj, attr)", "obj['attr']", "getattr(obj, 'attr', None)", "print(obj['attr'])"], "references": "getattr(obj, attr)"}
{"predictions": ["df.replace(r'[^\\w\\s]', '', regex=True, inplace=True)", "df.columns = df.columns.str.replace(' ', '_')", "df.replace(to_replace=r'\\s+', value=' ', regex=True, inplace=True)", "df.replace(r'[^\\w\\s]', '', regex=True)", "df.columns = df.columns.str.replace('_','')", "df.applymap(lambda x: x.replace('.', ''))", "df.replace(to_replace=r'\\s+', value=' ', regex=True)", "df.columns = df.columns.str.replace(' ', '')", "df.columns = df.columns.str.replace('[^A-Za-z0-9]+', '_')", "df.applymap(lambda x: x.replace('.', ','))"], "references": "df['range'].replace(',', '-', inplace=True)"}
{"predictions": ["json.dumps(Decimal('3.9'))", "json.dumps(3.9)", "print(json.dumps(Decimal('3.9')))", "json.dumps([Decimal('3.9')])", "json.dumps({'a': Decimal('3.9')})", "json.dumps({'decimal': Decimal('3.9')})", "json.dumps('3.9')", "\"\"\"3.9\"\"\".encode('unicode_escape')", "json.dumps(Decimal('3.9'), cls=DecimalEncoder)", "print(json.dumps(Decimal('3.9'), ensure_ascii=False))"], "references": "json.dumps('3.9')"}
{"predictions": ["re.findall('\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}', s)", "re.findall('(?:[0-9]{1,3}\\.){3}[0-9]{1,3}', s)", "re.findall('[0-9]+(?:\\.[0-9]+){3}', s)", "re.findall('\\\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\\\b', s)", "re.findall('(?:[0-9]{1,3}\\\\.){3}[0-9]{1,3}', s)", "re.findall('\\\\b(?:[0-9]{1,3}\\\\.){3}[0-9]{1,3}\\\\b', s)", "re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)", "re.findall('\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+', s)", "re.findall(r'[0-9]+(?:\\.[0-9]+){3}', s)", "re.findall('\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}', s)[0]"], "references": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}
{"predictions": ["df[df['A'].value_counts() ", "df[df.A.duplicated(keep=False)]", "df[df.A.duplicated()]", "df.loc[df['A'].value_counts() ", "df.loc[df.A.value_counts() ", "df[df['A'].duplicated()]", "df[df['A'].duplicated(keep=False)]", "df.loc[df.A.duplicated(keep=False)]", "df.loc[df.A.duplicated(), :]", "df.loc[df['A'].value_counts() "], "references": "df.groupby('A').filter(lambda x: len(x) > 1)"}
{"predictions": ["plt.colorbar(mappable)", "plt.colorbar(mappable, ax=ax)", "cbar = plt.colorbar(mappable)", "plt.colorbar(mappable=mappable)", "cb = plt.colorbar(mappable)", "fig.colorbar(mappable, ax=ax)", "cbar = plt.colorbar(mappable, ax=ax)", "plt.colorbar(mappable, orientation='vertical')", "plt.colorbar(mappable, cax=cax)", "fig.colorbar(mappable)"], "references": "plt.colorbar(mappable=mappable, cax=ax3)"}
{"predictions": ["df['text'].value_counts().head(100)", "df['text'].value_counts()[:100]", "df['text'].str.split().value_counts().head(100)", "df['text'].apply(lambda x: Counter(x.split()).most_common(100))", "df['text'].str.split().value_counts()[:100]", "df['text'].value_counts()[:100].sort_values(ascending=False)", "df['text'].str.split().value_counts().sort_values(ascending=False).head(100)", "df['text'].str.split().value_counts().sort_values(ascending=False)[:100]", "df['text'].value_counts()[:100].index", "df['text'].str.split().value_counts()[:100].sort_values(ascending=False)"], "references": "Counter(' '.join(df['text']).split()).most_common(100)"}
{"predictions": ["datetime.utcnow().replace(tzinfo=pytz.utc)", "datetime.datetime.now(datetime.timezone.utc)", "datetime.now(timezone.utc)", "datetime.utcnow().replace(tzinfo=timezone.utc)", "datetime.datetime.utcnow().replace(tzinfo=pytz.utc)", "datetime.utcnow()", "datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')", "datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc)", "datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')", "datetime.utcnow().replace(tzinfo=pytz.UTC)"], "references": "datetime.now(pytz.utc)"}
{"predictions": ["HttpResponse(json.dumps(data), content_type='application/json')", "response = HttpResponse(json.dumps(data), content_type='application/json')", "response.data", "return HttpResponse(json.dumps(data), content_type='application/json')", "HttpResponse(data, content_type='application/json')", "HttpResponse(json.dumps(data), content_type='application/json; charset=utf-8')", "HttpResponse(content=json.dumps(data), content_type='application/json')", "response.json()", "HttpResponse(json.dumps(data), content_type=\"application/json\")", "return JsonResponse(data)"], "references": "HttpResponse(data, content_type='application/json')"}
{"predictions": ["subprocess.Popen('background-process', *arguments)", "subprocess.Popen(['background-process'] + arguments)", "subprocess.call(['background-process'] + arguments)", "subprocess.Popen(arguments)", "subprocess.call(['background-process', *arguments])", "subprocess.Popen(['background-process', *arguments])", "subprocess.Popen(['background-process', 'arguments'])", "subprocess.Popen(['python', 'background-process.py', 'arguments'])", "subprocess.Popen(['background-process'] + list(arguments))", "subprocess.Popen(arguments, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"], "references": "subprocess.Popen(['background-process', 'arguments'])"}
{"predictions": ["s.split()", "re.findall('\\\\w+', s)", "s.split(' ')", "[x.strip() for x in s.split()]", "re.findall('\\\\S+', s)", "re.findall('\\\\w+|\\\\s+', s)", "[w for w in s.split()]", "[w.strip() for w in s.split()]", "[x.strip() for x in s.split(' ')]", "[x for x in s.split()]"], "references": "re.split('(\\\\W+)', s)"}
{"predictions": ["df.plot(kind='barh', stacked=True)", "df.plot(kind='bar', stacked=True)", "df.plot.bar(stacked=True)", "df.plot(kind='barh')", "df.plot.barh(stacked=True)", "ax = df.plot(kind='barh', stacked=True)", "df.plot(kind='barh', stacked=True, figsize=(10, 10))", "df.plot(kind='barh', stacked=True, figsize=(12, 8))", "ax = df.plot(kind='bar', stacked=True)", "df.plot(kind='barh', stacked=True, figsize=(20, 10))"], "references": "df.plot(kind='barh', stacked=True)"}
{"predictions": ["[i for i in range(len(myList)) if 'how' in myList[i] and 'what' in myList[i]]", "[i for i, s in enumerate(myList) if 'how' in s and 'what' in s]", "[i for i, x in enumerate(myList) if 'how' in x and 'what' in x]", "[i for i in range(len(myList)) if ('how' in myList[i]) and ('what' in myList[i])]", "[i for i in range(len(myList)) if 'how' in myList[i] or 'what' in myList[i]]", "[x for x in range(len(myList)) if 'how' in myList[x] and 'what' in myList[x]]", "[i for i, j in enumerate(myList) if 'how' in j and 'what' in j]", "[i for i, item in enumerate(myList) if 'how' in item and 'what' in item]", "[i for (i, x) in enumerate(myList) if 'how' in x and 'what' in x]", "[i for i, word in enumerate(myList) if 'how' in word and 'what' in word]"], "references": "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"}
{"predictions": ["pd.DataFrame(out, columns=['out-1', 'out-2'])", "pd.DataFrame({'out-1': out[:, 0], 'out-2': out[:, 1]})", "pd.DataFrame(out)", "pd.DataFrame({'out-1': out[0], 'out-2': out[1]})", "pd.DataFrame(out.values.tolist(), columns=['out-1', 'out-2'])", "pd.DataFrame(list(zip(out[0], out[1])), columns=['out-1', 'out-2'])", "pd.DataFrame(out, columns=('out-1', 'out-2'))", "pd.DataFrame(list(zip(out[:, 0], out[:, 1])), columns=['out-1', 'out-2'])", "pd.DataFrame(list(out), columns=['out-1', 'out-2'])", "df = pd.DataFrame(out, columns=['out-1', 'out-2'])"], "references": "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"}
{"predictions": ["ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(labels, rotation=45)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')", "ax.set_xticklabels([x.get_text() for x in ax.get_xticklabels()], rotation=45)", "plt.setp(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(labels, rotation=45, ha='right')", "ax.set_xticklabels([label.get_text() for label in ax.get_xticklabels()], rotation=45)", "ax.set_xticklabels(xticklabels, rotation=45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', rotation_mode='anchor')"], "references": "ax.set_xticklabels(labels, rotation=45)"}
{"predictions": ["re.findall('[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-", "re.findall('\\\\\\\\x[0-9a-fA-F]{2}', s)", "re.findall('\\\\\\\\x[0-9a-fA-F]+', s)", "re.findall('\\\\\\\\x[0-9a-f]{2}', s)", "re.findall('[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]', s", "re.findall('[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]', s)", "re.findall('[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]', s)", "re.findall('[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]', s)", "re.findall('[0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7][0-7]', s)", "re.findall('\\\\\\\\[0-7]+', s)"], "references": "re.findall(\"'\\\\\\\\[0-7]{1,3}'\", s)"}
{"predictions": ["len(list(yourdict.keys()))", "len(yourdict.keys())", "len(yourdict)", "print(len(yourdict))", "print(len(yourdict.keys()))", "print(len(list(yourdict.keys())))", "len(list(yourdict))", "len(list(yourdict.items()))", "len(set(list(yourdict.keys())))", "len(list(yourdict.values()))"], "references": "len(list(yourdict.keys()))"}
{"predictions": ["len(list(yourdictfile.keys()))", "len(yourdictfile.keys())", "len(yourdictfile)", "print(len(yourdictfile.keys()))", "print(len(yourdictfile))", "print(len(list(yourdictfile.keys())))", "len(list(yourdictfile))", "len(set(list(yourdictfile.keys())))", "(len(list(yourdictfile.keys())))", "(len(yourdictfile.keys()))"], "references": "len(set(open(yourdictfile).read().split()))"}
{"predictions": ["df.groupby('id').first()", "df.groupby('id').head(1)", "df.groupby('id').head()", "df.groupby('id', as_index=False).first()", "df.groupby('id')[['a', 'b']].first()", "df.groupby(['id']).first()", "df.groupby('id').apply(lambda x: x.iloc[0])", "df.groupby('id')[0].first()", "df.groupby('id').apply(lambda x: x.head(1))", "df.groupby('id', as_index=False).head(1)"], "references": "df.groupby('id').first()"}
{"predictions": ["df.iloc[:, 0].str.split(',', expand=True)", "df.iloc[:, 0].str.split(' ', expand=True)", "df.iloc[:, 0].str.split(expand=True)", "df.columns = df.iloc[:, 0].str.split(' ', expand=True)", "pd.DataFrame(df.iloc[:, 0].str.split(',', expand=True))", "df.iloc[:, 0].str.split('\\t', expand=True)", "df.columns = df.iloc[:, 0].str.split(',', expand=True)", "df.iloc[:, :2] = df.iloc[:, :2].apply(lambda x: x.str.split(',', expand=True), axis=1)", "df.iloc[:, :2] = df.iloc[:, :2].apply(lambda x: x.str.split(expand=True), axis=1)", "df.iloc[:, :3] = df.iloc[:, :3].apply(lambda x: x.str.split(',', expand=True), axis=1)"], "references": "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"}
{"predictions": ["subprocess.call('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')", "subprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "subprocess.call('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', shell=True)", "os.system('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')", "call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "subprocess.call('\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"')", "subprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'], shell=True)", "subprocess.Popen('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')", "subprocess.call('\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"', shell=True)", "call('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')"], "references": "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"}
{"predictions": ["q.reverse()", "list(reversed(list(q)))", "q.sort(reverse=True)", "q.sort(key=lambda x: x[1], reverse=True)", "q = list(reversed(list(q)))", "q.sort(key=lambda x: x[0], reverse=True)", "heapq.heapify(q)", "list(reversed(q))", "q = list(reversed(q))", "q = [(v, k) for k, v in list(q)]"], "references": "for n in [1,3,4,2]: q.put((-n, n))"}
{"predictions": ["np.concatenate((a, b), axis=0)", "np.concatenate([a, b], axis=0)", "numpy.concatenate((a, b), axis=0)", "np.concatenate((a, b))", "np.concatenate((a, b), axis=1)", "np.vstack((a, b))", "np.concatenate([a, b])", "np.concatenate((a, b), 0)", "np.concatenate((a,b), axis=0)", "np.hstack((a, b))"], "references": "np.concatenate((a, b), axis=0)"}
{"predictions": ["np.concatenate((a, b), axis=1)", "np.concatenate([a, b], axis=1)", "numpy.concatenate((a, b), axis=1)", "np.vstack((a, b))", "np.concatenate((a, b), 1)", "np.concatenate((a, b))", "np.concatenate((a, b), axis=2)", "c = np.concatenate((a, b), axis=1)", "numpy.concatenate([a, b], axis=1)", "np.hstack((a, b))"], "references": "np.concatenate((a, b), axis=1)"}
{"predictions": ["np.concatenate((a, b), axis=0)", "np.concatenate([a, b], axis=0)", "numpy.concatenate((a, b), axis=0)", "np.concatenate((a, b))", "np.concatenate((a, b), axis=1)", "np.vstack((a, b))", "np.concatenate([a, b])", "np.concatenate((a, b), 0)", "np.concatenate((a,b), axis=0)", "np.hstack((a, b))"], "references": "np.r_[(a[None, :], b[None, :])]"}
{"predictions": ["np.concatenate((a, b), axis=0)", "np.concatenate([a, b], axis=0)", "numpy.concatenate((a, b), axis=0)", "np.concatenate((a, b))", "np.concatenate((a, b), axis=1)", "np.vstack((a, b))", "np.concatenate([a, b])", "np.concatenate((a, b), 0)", "np.concatenate((a,b), axis=0)", "np.hstack((a, b))"], "references": "np.array((a, b))"}
{"predictions": ["response = HttpResponse(status=401)", "response = HttpResponse('Unauthorized', status=401)", "return Response(status=status.HTTP_401_UNAUTHORIZED)", "HttpResponse('Unauthorized', status=401)", "response = HttpResponse('Unauthorized') response.status_code = 401", "response.status_code = 401", "HttpResponse(status=401)", "response = HttpResponseUnauthorized()", "response = HttpResponse('Unauthorized') response['WWW-Authenticate'] = 'Basic realm=\"Login Required\"'", "response = HttpResponse('"], "references": "HttpResponse('Unauthorized', status=401)"}
{"predictions": ["sorted(c2, reverse=True)", "sorted(c2, key=lambda x: x[1], reverse=True)", "sorted(c2, key=lambda x: x[0], reverse=True)", "sorted(c2, key=itemgetter(1), reverse=True)", "sorted(c2, key=itemgetter(0), reverse=True)", "c2.sort(reverse=True)", "c2.sort(key=lambda x: x[1], reverse=True)", "sorted(c2, key=operator.itemgetter(1), reverse=True)", "sorted(c2, key=operator.itemgetter(0), reverse=True)", "list(reversed(sorted(c2)))"], "references": "c2.sort(key=lambda row: (row[2], row[1], row[0]))"}
{"predictions": ["sorted(c2, key=lambda x: (x[2], x[1]))", "sorted(c2, key=itemgetter(2, 1))", "sorted(c2, key=operator.itemgetter(2, 1))", "sorted(c2, key=lambda row: (row[2], row[1]))", "c2.sort(key=lambda x: (x[2], x[1]))", "sorted(c2, key=lambda r: (r[2], r[1]))", "sorted(c2, key=lambda x: (x[1], x[2]))", "sorted(c2, key=lambda x: (x[3], x[2]))", "sorted(c2, key=lambda x: (x[2], x[1]), reverse=True)", "sorted(c2, key=lambda x: (x[0], x[1]))"], "references": "c2.sort(key=lambda row: (row[2], row[1]))"}
{"predictions": ["df.index.get_loc('bob')", "df.index[df['name'] == 'bob']", "df.loc[df['name'] == 'bob']", "df.index[df['name'] == 'bob'].tolist()", "df[df['name'] == 'bob'].index[0]", "df.index.get_loc(bob)", "df.index[df['bob'] == 1]", "df.loc[df['name'] == 'Bob']", "df[df['name'] == 'bob'].index.values[0]", "df.index[df['name'] == 'Bob']"], "references": "df.index.get_loc('bob')"}
{"predictions": ["my_list = []", "my_list = list()", "my_list = [1, 2, 3]", "my_list = [[]]", "my_list = [1, 2, 3, 4, 5]", "my_list = [1, 2, 3, 4]", "my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "my_list = [[1, 2, 3], [4, 5, 6]]"], "references": "my_list = []"}
{"predictions": ["bytes.fromhex(hex_str)", "bytearray.fromhex(hex_str)", "binascii.unhexlify(hex_str)", "b = bytes.fromhex(hex_str)", "b = bytearray.fromhex(hex_str)", "bytes.fromhex(hex_str[2:])", "bytes(bytearray.fromhex(hex_str))", "hex_str.decode('hex')", "binascii.unhexlify(hex_str.encode('utf-8'))", "int(hex_str, 16).to_bytes(len(hex_str) // 2, 'big')"], "references": "bytes.fromhex(hex_str.replace('\\\\x', ''))"}
{"predictions": ["[[1, 2, 3], [4, 5, 6]]", "np.vstack(([1, 2, 3], [4, 5, 6]))", "[[1, 4], [2, 5], [3, 6]]", "np.vstack([[1, 2, 3], [4, 5, 6]])", "matrix([[1, 2, 3], [4, 5, 6]])", "np.array([[1, 2, 3], [4, 5, 6]])", "numpy.vstack(([1, 2, 3], [4, 5, 6]))", "[[1, 2, 3],  [4, 5, 6]]", "numpy.array([[1, 2, 3], [4, 5, 6]])", "matrix = [[1, 2, 3], [4, 5, 6]]"], "references": "np.column_stack(([1, 2, 3], [4, 5, 6]))"}
{"predictions": ["list(g)[4]", "next(g)", "print(next(g))", "list(islice(g, 5))", "[x for x in g][4]", "next(itertools.islice(g, 5, None))", "next(g)[4]", "next(itertools.islice(g, 5, 5))", "next(islice(g, 5, None))", "[i for i in g][4]"], "references": "next(itertools.islice(g, 5, 5 + 1))"}
{"predictions": ["str(word)", "print('{}'.format(word))", "print('\"{}\"'.format(word))", "\"\"\"\"\"\".join(word)", "re.sub('[^A-Za-z0-9]+', '', word)", "print('%s' % word)", "print('{0}'.format(word))", "re.sub('[^A-Za-z0-9 ]+', '', word)", "re.sub('[^a-zA-Z0-9]', '', word)", "re.sub('[^a-zA-Z0-9]+', '', word)"], "references": "'\"{}\"'.format(word)"}
{"predictions": ["with open(filename, 'r') as f:     data = f.readlines()", "data = open(filename, 'r').readlines()", "with open(filename) as f:     data = f.readlines()", "data = open(filename, 'r').read().splitlines()", "data = open(filename).read().splitlines()", "data = open(filename).readlines()", "with open(filename, 'r') as f:     data = f.read().splitlines()", "with open(filename) as f:     data = f.read().splitlines()", "data = [] with open(filename, 'r') as f:     for line in f:         data.append(line.strip())", "data = open(filename, 'r').read().split('\\n')"], "references": "data = [line.strip() for line in open(filename, 'r')]"}
{"predictions": ["re.sub('i', '', 'it is icy')", "re.sub('i','', 'it is icy')", "'it is icy'.replace('i', '')", "re.sub('i', '', it is icy)", "print('it is icy'.replace('i', ''))", "re.sub('i', 'x', 'it is icy')", "re.sub('\\\\bi\\\\b', '', 'it is icy')", "re.sub('i', '', 'it is icy').strip()", "\"\"\"it is icy\"\"\".replace('i', '')", "re.sub('i', 'I', 'it is icy')"], "references": "\"\"\"\"\"\".join([char for char in 'it is icy' if char!= 'i'])"}
{"predictions": ["re.sub('i', '', 'it is icy')", "'it is icy'.replace('i', '')", "re.sub('i','', 'it is icy')", "re.sub('i', '', it is icy)", "print('it is icy'.replace('i', ''))", "\"\"\"it is icy\"\"\".replace('i', '')", "re.sub('\\\\bi\\\\b', '', 'it is icy')", "re.sub('i+', '', 'it is icy')", "re.sub('i','', it is icy)", "it is icy.replace('i', '')"], "references": "re.sub('i', '', 'it is icy')"}
{"predictions": ["re.sub('i', '', 'it is icy')", "'it is icy'.replace('i', '')", "re.sub('i', '', it is icy)", "\"\"\"it is icy\"\"\".replace('i', '')", "re.sub('i','', 'it is icy')", "re.sub('[iI]', '', 'it is icy')", "re.sub('[i]', '', 'it is icy')", "it is icy.replace('i', '')", "re.sub('i+', '', 'it is icy')", "it.replace('i', '')"], "references": "\"\"\"it is icy\"\"\".replace('i', '')"}
{"predictions": ["[int(i) for i in intstringlist]", "[int(x) for x in intstringlist]", "list(map(int, intstringlist))", "[int(s) for s in intstringlist]", "map(int, intstringlist)", "nums = [int(i) for i in intstringlist]", "nums = list(map(int, intstringlist))", "nums = [int(x) for x in intstringlist]", "[int(num) for num in intstringlist]", "nums = map(int, intstringlist)"], "references": "nums = [int(x) for x in intstringlist]"}
{"predictions": ["[os.path.join('/mydir', f) for f in os.listdir('/mydir') if f.endswith('.txt')]", "[f for f in os.listdir('/mydir') if os.path.isfile(os.path.join('/mydir', f)) and f.endswith('.txt')]", "[f for f in listdir('/mydir') if isfile(join('/mydir', f)) and f.endswith('.txt')]", "[f for f in os.listdir('/mydir') if f.endswith('.txt')]", "glob.glob('/mydir/*.txt')", "[x for x in os.listdir('/mydir') if x.endswith('.txt')]", "[os.path.join('/mydir', f) for f in os.listdir('/mydir') if os.path.isfile(os.path.join('/mydir', f)) and f.endswith('.txt')]", "[f for f in listdir('/mydir') if f.endswith('.txt')]", "[f for f in listdir('mydir') if isfile(join('mydir', f)) and f.endswith('.txt')]", "[f for f in os.listdir('/mydir') if os.path.isfile(os.path.join('/mydir', f)) and os.path.splitext(f)[1] == '.txt']"], "references": "os.chdir('/mydir')  files = []   for file in glob.glob('*.txt'):   files.append(file)"}
{"predictions": ["glob.glob('/mydir/*.txt')", "[f for f in listdir('/mydir') if isfile(join('/mydir', f)) and f.endswith('.txt')]", "[f for f in os.listdir('/mydir') if os.path.isfile(os.path.join('/mydir', f)) and f.endswith('.txt')]", "[f for f in listdir('mydir') if isfile(join('mydir', f)) and f.endswith('.txt')]", "os.listdir('/mydir')", "[x for x in os.listdir('/mydir') if x.endswith('.txt')]", "[f for f in os.listdir('/mydir') if f.endswith('.txt')]", "for root, dirs, files in os.walk('/mydir'):     for f in files:         if f.endswith('.txt'):             print(os.path.join(root, f))", "[f for f in os.listdir('/mydir') if os.path.isfile(os.path.join('/mydir', f)) and os.path.splitext(f)[1] == '.txt']", "for filename in os.listdir('/mydir'):     if filename.endswith('.txt'):         print(os.path.join('/mydir', filename))"], "references": "[file for file in os.listdir('/mydir') if file.endswith('.txt')]"}
{"predictions": ["glob.glob('/mydir/*.txt')", "[f for f in listdir('/mydir') if isfile(join('/mydir', f)) and f.endswith('.txt')]", "[f for f in os.listdir('/mydir') if os.path.isfile(os.path.join('/mydir', f)) and f.endswith('.txt')]", "[f for f in listdir('mydir') if isfile(join('mydir', f)) and f.endswith('.txt')]", "os.listdir('/mydir')", "[x for x in os.listdir('/mydir') if x.endswith('.txt')]", "[f for f in os.listdir('/mydir') if f.endswith('.txt')]", "for root, dirs, files in os.walk('/mydir'):     for f in files:         if f.endswith('.txt'):             print(os.path.join(root, f))", "[f for f in os.listdir('/mydir') if os.path.isfile(os.path.join('/mydir', f)) and os.path.splitext(f)[1] == '.txt']", "for filename in os.listdir('/mydir'):     if filename.endswith('.txt'):         print(os.path.join('/mydir', filename))"], "references": "[file for (root, dirs, files) in os.walk('/mydir') for file in files if file.endswith('.txt')]"}
{"predictions": ["pd.date_range('20130226', '20130302')", "pd.date_range('20130226', '20130302', freq='D')", "pd.date_range(start='20130226', end='20130302', freq='D')", "pd.date_range(start='20130226', end='20130302')", "pd.date_range('20130226', '20130302', freq='1D')", "pd.date_range('20130226', '20130302').strftime('%Y%m%d')", "pd.date_range('20130226', '20130302', freq='D').strftime('%Y%m%d')", "pd.date_range('20130226', '20130302').strftime('%Y%m%d').tolist()", "pd.date_range('20130226', '20130302', freq='d')", "pd.date_range('20130226', '20130302', freq='D').strftime('%Y%m%d').tolist()"], "references": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]"}
{"predictions": ["json.loads(request_body)", "request_body = json.loads(request_body)", "json.loads(request_body.decode('utf-8'))", "json.loads(request_body, object_pairs_hook=OrderedDict)", "json.loads(request.body)", "request_body = json.loads(request.body)", "json.loads(request.body.decode('utf-8'))", "dict(json.loads(request_body))", "try:     request_body = json.loads(request_body) except ValueError:     pass", "request_body = json.loads(request.body.decode('utf-8'))"], "references": "json.loads(request_body)"}
{"predictions": ["[x for x in lst if isinstance(x, int)]", "[i for i in lst if isinstance(i, int)]", "[item for item in lst if isinstance(item, int)]", "[x for x in lst if type(x) == int]", "[x for x in lst if x.isdigit()]", "[int(i) for i in lst]", "[e for e in lst if isinstance(e, int)]", "[int(x) for x in lst]", "[x for x in lst if isinstance(x, (int, float))]", "[x for x in lst if type(x) is int]"], "references": "[element for element in lst if isinstance(element, int)]"}
{"predictions": ["sorted(list_of_dicts, key=lambda x: x['name'])", "sorted(list_of_dicts, key=operator.itemgetter('name'))", "sorted(list_of_dicts, key=lambda d: d['name'])", "sorted(list_of_dicts, key=lambda k: k['name'])", "sorted(list_of_dicts, key=lambda i: i['name'])", "sorted(list_of_dicts, key=itemgetter('name'))", "list_of_dicts.sort(key=lambda x: x['name'])", "list(sorted(list_of_dicts, key=lambda x: x['name']))", "sorted(list_of_dicts, key=lambda item: item['name'])", "list_of_dicts.sort(key=operator.itemgetter('name'))"], "references": "list_of_dicts.sort(key=operator.itemgetter('name'))"}
{"predictions": ["sorted(list_of_dicts, key=lambda x: x['age'])", "sorted(list_of_dicts, key=operator.itemgetter('age'))", "sorted(list_of_dicts, key=lambda k: k['age'])", "sorted(list_of_dicts, key=lambda d: d['age'])", "sorted(list_of_dicts, key=itemgetter('age'))", "list_of_dicts.sort(key=lambda x: x['age'])", "sorted(list_of_dicts, key=lambda i: i['age'])", "list(sorted(list_of_dicts, key=lambda x: x['age']))", "list_of_dicts.sort(key=operator.itemgetter('age'))", "list_of_dicts.sort(key=lambda d: d['age'])"], "references": "list_of_dicts.sort(key=operator.itemgetter('age'))"}
{"predictions": ["df.sort_values(by='scores', ascending=False)", "df.sort_values(by='scores', ascending=False, inplace=True)", "df.groupby('prots').sum().sort_values('scores', ascending=False)", "df.groupby('prots')['scores'].sum().sort_values(ascending=False)", "df.sort_values('scores', ascending=False, inplace=True)", "df.groupby('prots').sum().sort_values(by='scores', ascending=False)", "df.sort_values('scores', ascending=False)", "df.sort('scores', ascending=False)", "df.sort_values(['scores', 'prots'], ascending=False)", "df.sort_values('scores', ascending=False).groupby('prots')"], "references": "df.groupby('prots').sum().sort_values('scores', ascending=False)"}
{"predictions": ["sorted(list, key=lambda x: (x['points'], x['time']))", "sorted(list, key=operator.itemgetter('points', 'time'))", "sorted(list, key=itemgetter('points', 'time'))", "sorted(list, key=lambda i: (i['points'], i['time']))", "sorted(list, key=lambda d: (d['points'], d['time']))", "sorted(list, key=lambda k: (k['points'], k['time']))", "list.sort(key=lambda x: (x['points'], x['time']))", "sorted(list, key=lambda x: (x['time'], x['points']))", "sorted(list, key=operator.itemgetter('time', 'points'))", "sorted(list, key=lambda x: (x.get('points'), x.get('time')))"], "references": "list.sort(key=lambda item: (item['points'], item['time']))"}
{"predictions": ["int(number)", "number = 0", "number = -1", "number = int(number)", "number = 0", "number % 2", "number % 2", "None", "number = number - 1", "number % (2 ** 32 - 1)"], "references": "struct.unpack('H', struct.pack('h', number))"}
{"predictions": ["df.to_csv(filename, index=False)", "df.to_csv(filename)", "df.to_csv(filename, header=False, index=False)", "df.to_csv(filename, index=False, encoding='utf-8')", "df.to_csv(filename, index=False, sep='\\t')", "df.reset_index(drop=True).to_csv(filename, index=False)", "pd.DataFrame(df).to_csv(filename, index=False)", "df.to_csv(path_or_buf=filename, index=False)", "df.to_csv(filename, index=False, sep=',')", "df.to_csv(filename, index=False, header=False)"], "references": "df.to_csv(filename, index=False)"}
{"predictions": ["json.loads(unescaped)", "json_data = json.loads(unescaped)", "json.loads(unescaped.decode('unicode_escape'))", "json_data = urllib.parse.unquote(unescaped)", "json.loads(urllib.parse.unquote(unescaped))", "json_data = json.loads(unescaped.decode('unicode_escape'))", "json.loads(unescaped.replace('\\\\\"', '\"'))", "json_data = json.loads(unescaped.decode('utf-8'))", "json.loads(unescaped.decode('string_escape'))", "json.loads(unescaped.decode('utf-8'))"], "references": "json_data = json.loads(unescaped)"}
{"predictions": ["newFile.write(newFileBytes)", "with open(newFile, 'wb') as f:     f.write(newFileBytes)", "with open(newFile, 'wb') as newFile:     newFile.write(newFileBytes)", "open(newFile, 'wb').write(newFileBytes)", "with open('newFile', 'wb') as newFile:     newFile.write(newFileBytes)", "with open('newFile', 'wb') as f:     f.write(newFileBytes)", "with open(newFile, 'wb') as file:     file.write(newFileBytes)", "with open(newFile, 'wb+') as newFile:     newFile.write(newFileBytes)", "f = open(newFile, 'wb') f.write(newFileBytes)", "with open(newFile, 'wb+') as f:     f.write(newFileBytes)"], "references": "newFile.write(struct.pack('5B', *newFileBytes))"}
{"predictions": ["list(dict.keys())[-1]", "print(list(dict.keys())[-1])", "dict.keys()[-1]", "sorted(list(dict.keys()))[-1]", "list(reversed(list(dict.keys())))[0]", "dict.popitem()", "sorted(list(dict.keys()), reverse=True)[0]", "list(dict.values())[-1]", "[(k, v) for k, v in list(dict.items())[::-1]]", "list(dict.items())[-1][0]"], "references": "list(dict.keys())[-1]"}
{"predictions": ["datetime.datetime.now()", "datetime.now()", "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')", "datetime.now().strftime('%Y-%m-%d %H:%M:%S')", "dt = datetime.datetime.now()", "now = datetime.datetime.now()", "datetime.datetime.utcnow()", "datetime.datetime.combine(datetime.date.today(), datetime.datetime.now().time())", "datetime.datetime.today()", "datetime.datetime.combine(datetime.date.today(), datetime.time.min)"], "references": "datetime.datetime.now()"}
{"predictions": ["np.max(np.abs(x), axis=1)", "np.argmax(np.abs(x), axis=1)", "np.max(np.abs(x), axis=0)", "np.max(np.abs(x))", "x.max(axis=1)", "np.abs(x).max(axis=0)", "np.argmax(np.abs(x), axis=0)", "np.argmax(np.abs(x))", "np.amax(np.abs(x), axis=1)", "x.max(axis=0)"], "references": "max(x.min(), x.max(), key=abs)"}
